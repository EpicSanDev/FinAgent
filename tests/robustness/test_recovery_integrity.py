"""
Tests de Robustesse - R√©cup√©ration et Int√©grit√© des Donn√©es

Ces tests valident la capacit√© du syst√®me FinAgent √† r√©cup√©rer
automatiquement des pannes, maintenir l'int√©grit√© des donn√©es
et assurer la coh√©rence du syst√®me apr√®s incidents.
"""

import pytest
import asyncio
import time
import pickle
import json
import tempfile
import shutil
import os
from decimal import Decimal
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Tuple, Set
from dataclasses import dataclass, asdict
from unittest.mock import Mock, patch, AsyncMock
import sqlite3
import threading
from contextlib import contextmanager
import hashlib

from finagent.business.models.portfolio_models import Portfolio, Position
from finagent.business.models.decision_models import InvestmentDecision, DecisionType
from finagent.business.strategy.engine.strategy_engine import StrategyEngine
from finagent.business.portfolio.portfolio_manager import PortfolioManager
from finagent.business.exceptions import DataError, ValidationError

# Import des utilitaires de test
from tests.utils import (
    create_test_portfolio,
    create_test_strategy,
    MockOpenBBProvider,
    MockClaudeProvider
)


@dataclass
class RecoveryTestResult:
    """R√©sultat de test de r√©cup√©ration"""
    test_name: str
    recovery_type: str
    recovery_successful: bool
    recovery_time_ms: float
    data_integrity_preserved: bool
    system_consistency_maintained: bool
    automatic_recovery: bool
    recovery_score: float


@dataclass
class DataIntegrityCheck:
    """R√©sultat de v√©rification d'int√©grit√©"""
    check_name: str
    data_consistent: bool
    corruption_detected: bool
    missing_data_count: int
    duplicate_data_count: int
    invalid_data_count: int
    integrity_score: float


class DataIntegrityValidator:
    """Validateur d'int√©grit√© des donn√©es"""
    
    def __init__(self):
        self.integrity_rules = {}
        self.validation_log = []
    
    def register_integrity_rule(self, rule_name: str, validation_func: callable):
        """Enregistre une r√®gle d'int√©grit√©"""
        self.integrity_rules[rule_name] = validation_func
        print(f"   üìã R√®gle d'int√©grit√© enregistr√©e: {rule_name}")
    
    def validate_portfolio_integrity(self, portfolio: Portfolio) -> DataIntegrityCheck:
        """Valide l'int√©grit√© d'un portfolio"""
        errors = []
        
        # V√©rifications de base
        missing_data = 0
        duplicates = 0
        invalid_data = 0
        
        # 1. V√©rifier champs requis
        if not portfolio.id:
            errors.append("Portfolio ID manquant")
            missing_data += 1
        
        if portfolio.cash is None:
            errors.append("Cash amount manquant")
            missing_data += 1
        elif portfolio.cash < 0:
            errors.append(f"Cash n√©gatif: {portfolio.cash}")
            invalid_data += 1
        
        # 2. V√©rifier positions
        seen_symbols = set()
        for position in portfolio.positions:
            # V√©rifier duplicatas
            if position.symbol in seen_symbols:
                errors.append(f"Position dupliqu√©e: {position.symbol}")
                duplicates += 1
            seen_symbols.add(position.symbol)
            
            # V√©rifier donn√©es position
            if not position.symbol:
                errors.append("Symbol manquant dans position")
                missing_data += 1
            
            if position.quantity <= 0:
                errors.append(f"Quantit√© invalide pour {position.symbol}: {position.quantity}")
                invalid_data += 1
            
            if position.average_price <= 0:
                errors.append(f"Prix moyen invalide pour {position.symbol}: {position.average_price}")
                invalid_data += 1
        
        # 3. V√©rifier coh√©rence temporelle
        if portfolio.last_updated and portfolio.created_at:
            if portfolio.last_updated < portfolio.created_at:
                errors.append("Last_updated ant√©rieur √† created_at")
                invalid_data += 1
        
        # Score d'int√©grit√©
        total_checks = len(portfolio.positions) * 3 + 5  # Estim√©
        error_count = missing_data + duplicates + invalid_data
        integrity_score = max(0.0, 1.0 - (error_count / total_checks))
        
        result = DataIntegrityCheck(
            check_name="portfolio_integrity",
            data_consistent=len(errors) == 0,
            corruption_detected=len(errors) > 0,
            missing_data_count=missing_data,
            duplicate_data_count=duplicates,
            invalid_data_count=invalid_data,
            integrity_score=integrity_score
        )
        
        if errors:
            print(f"   ‚ö†Ô∏è  Erreurs int√©grit√© portfolio: {errors}")
        
        return result
    
    def validate_decision_integrity(self, decisions: List[InvestmentDecision]) -> DataIntegrityCheck:
        """Valide l'int√©grit√© des d√©cisions d'investissement"""
        errors = []
        missing_data = 0
        duplicates = 0
        invalid_data = 0
        
        seen_decisions = set()
        
        for decision in decisions:
            # Cr√©er signature d√©cision
            decision_sig = f"{decision.symbol}_{decision.decision_type}_{decision.timestamp}"
            
            if decision_sig in seen_decisions:
                errors.append(f"D√©cision dupliqu√©e: {decision_sig}")
                duplicates += 1
            seen_decisions.add(decision_sig)
            
            # V√©rifier champs requis
            if not decision.symbol:
                errors.append("Symbol manquant dans d√©cision")
                missing_data += 1
            
            if not decision.decision_type:
                errors.append("Type d√©cision manquant")
                missing_data += 1
            
            if decision.confidence is None or decision.confidence < 0 or decision.confidence > 1:
                errors.append(f"Confidence invalide: {decision.confidence}")
                invalid_data += 1
            
            # V√©rifier coh√©rence quantit√©/prix pour ordres
            if decision.decision_type in [DecisionType.BUY, DecisionType.SELL]:
                if not decision.suggested_quantity or decision.suggested_quantity <= 0:
                    errors.append(f"Quantit√© sugg√©r√©e invalide: {decision.suggested_quantity}")
                    invalid_data += 1
                
                if not decision.target_price or decision.target_price <= 0:
                    errors.append(f"Prix cible invalide: {decision.target_price}")
                    invalid_data += 1
        
        # Score int√©grit√©
        total_checks = len(decisions) * 5 if decisions else 1
        error_count = missing_data + duplicates + invalid_data
        integrity_score = max(0.0, 1.0 - (error_count / total_checks))
        
        return DataIntegrityCheck(
            check_name="decision_integrity",
            data_consistent=len(errors) == 0,
            corruption_detected=len(errors) > 0,
            missing_data_count=missing_data,
            duplicate_data_count=duplicates,
            invalid_data_count=invalid_data,
            integrity_score=integrity_score
        )
    
    def calculate_data_checksum(self, data: Any) -> str:
        """Calcule checksum des donn√©es"""
        if isinstance(data, dict):
            serialized = json.dumps(data, sort_keys=True, default=str)
        else:
            serialized = str(data)
        
        return hashlib.sha256(serialized.encode()).hexdigest()[:16]


class RecoverySimulator:
    """Simulateur de pannes et r√©cup√©ration"""
    
    def __init__(self):
        self.backup_storage = {}
        self.recovery_log = []
        self.data_snapshots = {}
    
    def create_data_snapshot(self, snapshot_name: str, data: Dict[str, Any]):
        """Cr√©e un snapshot des donn√©es"""
        self.data_snapshots[snapshot_name] = {
            "data": pickle.dumps(data),
            "timestamp": datetime.now(),
            "checksum": hashlib.sha256(pickle.dumps(data)).hexdigest()
        }
        print(f"   üì∏ Snapshot cr√©√©: {snapshot_name}")
    
    def restore_from_snapshot(self, snapshot_name: str) -> Dict[str, Any]:
        """Restaure depuis un snapshot"""
        if snapshot_name not in self.data_snapshots:
            raise DataError(f"Snapshot {snapshot_name} non trouv√©")
        
        snapshot = self.data_snapshots[snapshot_name]
        
        # V√©rifier int√©grit√©
        restored_data = pickle.loads(snapshot["data"])
        current_checksum = hashlib.sha256(snapshot["data"]).hexdigest()
        
        if current_checksum != snapshot["checksum"]:
            raise DataError(f"Corruption d√©tect√©e dans snapshot {snapshot_name}")
        
        print(f"   üîÑ Donn√©es restaur√©es depuis: {snapshot_name}")
        return restored_data
    
    @contextmanager
    def simulate_system_crash(self, crash_type: str = "sudden"):
        """Simule un crash syst√®me"""
        print(f"   üí• Simulation crash: {crash_type}")
        
        # Enregistrer √©tat avant crash
        pre_crash_time = time.perf_counter()
        
        try:
            yield
        except Exception as e:
            print(f"   üî¥ Exception pendant crash: {e}")
            raise
        finally:
            # Simuler temps r√©cup√©ration
            if crash_type == "sudden":
                recovery_delay = 0.1  # R√©cup√©ration rapide
            elif crash_type == "hardware_failure":
                recovery_delay = 1.0  # R√©cup√©ration lente
            else:
                recovery_delay = 0.5  # R√©cup√©ration moyenne
            
            time.sleep(recovery_delay)
            
            recovery_time = (time.perf_counter() - pre_crash_time) * 1000
            
            self.recovery_log.append({
                "crash_type": crash_type,
                "recovery_time_ms": recovery_time,
                "timestamp": datetime.now()
            })
            
            print(f"   ‚úÖ R√©cup√©ration simul√©e en {recovery_time:.1f}ms")
    
    def simulate_data_corruption(self, data: Dict[str, Any], 
                               corruption_type: str) -> Dict[str, Any]:
        """Simule corruption de donn√©es"""
        corrupted_data = data.copy()
        
        if corruption_type == "partial_corruption":
            # Corrompre quelques cl√©s
            keys = list(corrupted_data.keys())
            for key in keys[:len(keys)//3]:  # 1/3 des cl√©s
                if isinstance(corrupted_data[key], (int, float)):
                    corrupted_data[key] = -999999  # Valeur invalide
                elif isinstance(corrupted_data[key], str):
                    corrupted_data[key] = "CORRUPTED"
        
        elif corruption_type == "missing_fields":
            # Supprimer champs al√©atoires
            keys_to_remove = list(corrupted_data.keys())[:2]
            for key in keys_to_remove:
                del corrupted_data[key]
        
        elif corruption_type == "type_corruption":
            # Changer types de donn√©es
            for key, value in corrupted_data.items():
                if isinstance(value, (int, float)):
                    corrupted_data[key] = str(value) + "_corrupted"
                elif isinstance(value, str):
                    corrupted_data[key] = 12345  # Type incorrect
        
        print(f"   üóÇÔ∏è  Corruption simul√©e: {corruption_type}")
        return corrupted_data


@pytest.mark.robustness
@pytest.mark.recovery
class TestBasicRecovery:
    """Tests de r√©cup√©ration de base"""
    
    @pytest.fixture
    async def recovery_test_components(self, test_config):
        """Composants pour tests de r√©cup√©ration"""
        openbb_provider = MockOpenBBProvider(test_config.get("openbb", {}))
        claude_provider = MockClaudeProvider(test_config.get("claude", {}))
        
        strategy_engine = StrategyEngine(test_config.get("strategy", {}))
        portfolio_manager = PortfolioManager(test_config.get("portfolio", {}))
        
        return {
            "openbb": openbb_provider,
            "claude": claude_provider,
            "strategy_engine": strategy_engine,
            "portfolio_manager": portfolio_manager
        }
    
    @pytest.mark.asyncio
    async def test_automatic_recovery_from_api_failures(self, recovery_test_components):
        """Test r√©cup√©ration automatique des pannes API"""
        simulator = RecoverySimulator()
        
        print("üîÑ Test r√©cup√©ration automatique pannes API")
        
        # Cr√©er donn√©es test
        test_portfolio = create_test_portfolio(initial_capital=Decimal("100000.00"))
        
        # Cr√©er snapshot avant test
        simulator.create_data_snapshot("before_api_test", {
            "portfolio": asdict(test_portfolio)
        })
        
        recovery_results = {}
        
        # Test r√©cup√©ration avec diff√©rents types de pannes
        failure_scenarios = [
            ("timeout_recovery", "R√©cup√©ration apr√®s timeout"),
            ("connection_lost", "R√©cup√©ration perte connexion"),
            ("service_unavailable", "R√©cup√©ration service indispo")
        ]
        
        for scenario_name, description in failure_scenarios:
            print(f"\n   üîß Test: {description}")
            
            start_time = time.perf_counter()
            
            with simulator.simulate_system_crash("sudden"):
                # Simuler panne API
                with patch.object(
                    recovery_test_components["openbb"], 
                    'get_market_data',
                    side_effect=[
                        Exception(f"Panne simul√©e: {scenario_name}"),
                        Exception(f"Panne simul√©e: {scenario_name}"),
                        {"symbol": "AAPL", "price": 150.0, "recovered": True}  # R√©cup√©ration au 3e essai
                    ]
                ):
                    # Tentatives avec retry automatique
                    for attempt in range(3):
                        try:
                            result = await recovery_test_components["openbb"].get_market_data("AAPL")
                            if result.get("recovered"):
                                print(f"      ‚úÖ R√©cup√©ration r√©ussie au tentative {attempt + 1}")
                                break
                        except Exception as e:
                            print(f"      ‚ùå Tentative {attempt + 1} √©chou√©e: {e}")
                            if attempt < 2:  # Retry automatique
                                await asyncio.sleep(0.1)
                            else:
                                print(f"      üî¥ R√©cup√©ration √©chou√©e apr√®s 3 tentatives")
            
            end_time = time.perf_counter()
            recovery_time = (end_time - start_time) * 1000
            
            # V√©rifier int√©grit√© apr√®s r√©cup√©ration
            integrity_validator = DataIntegrityValidator()
            integrity_check = integrity_validator.validate_portfolio_integrity(test_portfolio)
            
            recovery_results[scenario_name] = RecoveryTestResult(
                test_name=scenario_name,
                recovery_type="api_failure",
                recovery_successful=result.get("recovered", False) if 'result' in locals() else False,
                recovery_time_ms=recovery_time,
                data_integrity_preserved=integrity_check.data_consistent,
                system_consistency_maintained=True,  # Portfolio inchang√©
                automatic_recovery=True,
                recovery_score=1.0 if result.get("recovered", False) and integrity_check.data_consistent else 0.5
            )
        
        # Analyser r√©sultats r√©cup√©ration
        successful_recoveries = sum(1 for r in recovery_results.values() if r.recovery_successful)
        avg_recovery_time = sum(r.recovery_time_ms for r in recovery_results.values()) / len(recovery_results)
        
        print(f"\nüìä R√©sultats r√©cup√©ration API:")
        print(f"   R√©cup√©rations r√©ussies: {successful_recoveries}/{len(recovery_results)}")
        print(f"   Temps r√©cup√©ration moyen: {avg_recovery_time:.1f}ms")
        
        # Assertions r√©cup√©ration API
        assert successful_recoveries >= len(recovery_results) * 0.8  # Au moins 80% r√©cup√©ration
        assert avg_recovery_time < 5000  # Moins de 5 secondes
        
        return {
            "recovery_results": recovery_results,
            "success_rate": successful_recoveries / len(recovery_results),
            "avg_recovery_time": avg_recovery_time
        }
    
    @pytest.mark.asyncio
    async def test_data_corruption_recovery(self, recovery_test_components):
        """Test r√©cup√©ration apr√®s corruption de donn√©es"""
        simulator = RecoverySimulator()
        integrity_validator = DataIntegrityValidator()
        
        print("üóÇÔ∏è  Test r√©cup√©ration corruption donn√©es")
        
        # Cr√©er donn√©es initiales valides
        original_portfolio = create_test_portfolio(initial_capital=Decimal("50000.00"))
        
        # Ajouter positions pour enrichir les donn√©es
        for i in range(5):
            position = Position(
                symbol=f"STOCK{i:02d}",
                quantity=100 + i * 10,
                average_price=Decimal(str(50.0 + i * 5)),
                current_price=Decimal(str(52.0 + i * 5)),
                last_updated=datetime.now()
            )
            original_portfolio.positions.append(position)
        
        # V√©rifier int√©grit√© donn√©es originales
        original_integrity = integrity_validator.validate_portfolio_integrity(original_portfolio)
        print(f"   ‚úÖ Int√©grit√© donn√©es originales: {original_integrity.integrity_score:.2f}")
        
        # Cr√©er snapshot de sauvegarde
        simulator.create_data_snapshot("clean_portfolio", {
            "portfolio": asdict(original_portfolio)
        })
        
        # Test diff√©rents types de corruption
        corruption_types = ["partial_corruption", "missing_fields", "type_corruption"]
        corruption_results = {}
        
        for corruption_type in corruption_types:
            print(f"\n   üîß Test corruption: {corruption_type}")
            
            # Cr√©er donn√©es corrompues
            portfolio_dict = asdict(original_portfolio)
            corrupted_dict = simulator.simulate_data_corruption(portfolio_dict, corruption_type)
            
            # Tenter validation donn√©es corrompues
            try:
                # Reconstruction portfolio √† partir donn√©es corrompues
                corrupted_portfolio = Portfolio(**corrupted_dict)
                corruption_detected = False
            except (TypeError, ValueError, ValidationError) as e:
                print(f"      üî¥ Corruption d√©tect√©e √† la reconstruction: {e}")
                corruption_detected = True
                corrupted_portfolio = None
            
            # Si reconstruction r√©ussie, v√©rifier int√©grit√©
            if corrupted_portfolio:
                corruption_integrity = integrity_validator.validate_portfolio_integrity(corrupted_portfolio)
                corruption_detected = corruption_integrity.corruption_detected
                print(f"      üìä Score int√©grit√© corrompue: {corruption_integrity.integrity_score:.2f}")
            
            # R√©cup√©ration depuis snapshot si corruption d√©tect√©e
            recovery_successful = False
            recovered_portfolio = None
            
            if corruption_detected:
                print(f"      üîÑ R√©cup√©ration depuis snapshot...")
                try:
                    start_recovery = time.perf_counter()
                    restored_data = simulator.restore_from_snapshot("clean_portfolio")
                    recovered_portfolio = Portfolio(**restored_data["portfolio"])
                    end_recovery = time.perf_counter()
                    
                    recovery_time = (end_recovery - start_recovery) * 1000
                    
                    # V√©rifier int√©grit√© donn√©es r√©cup√©r√©es
                    recovery_integrity = integrity_validator.validate_portfolio_integrity(recovered_portfolio)
                    recovery_successful = recovery_integrity.data_consistent
                    
                    print(f"      ‚úÖ R√©cup√©ration en {recovery_time:.1f}ms, "
                          f"int√©grit√©: {recovery_integrity.integrity_score:.2f}")
                    
                except Exception as e:
                    print(f"      ‚ùå √âchec r√©cup√©ration: {e}")
                    recovery_time = 0
                    recovery_successful = False
            else:
                recovery_time = 0  # Pas de r√©cup√©ration n√©cessaire
                recovery_successful = True  # Donn√©es non corrompues
            
            corruption_results[corruption_type] = {
                "corruption_detected": corruption_detected,
                "recovery_successful": recovery_successful,
                "recovery_time_ms": recovery_time,
                "data_integrity_preserved": recovery_successful
            }
        
        # Analyser r√©sultats globaux
        total_recoveries = sum(1 for r in corruption_results.values() if r["recovery_successful"])
        recovery_rate = total_recoveries / len(corruption_results)
        
        print(f"\nüìä R√©sultats r√©cup√©ration corruption:")
        print(f"   Taux r√©cup√©ration: {recovery_rate:.1%}")
        
        # Assertions r√©cup√©ration corruption
        assert recovery_rate >= 0.8  # Au moins 80% r√©cup√©ration
        assert all(r["corruption_detected"] for r in corruption_results.values())  # Toutes corruptions d√©tect√©es
        
        return {
            "original_integrity": original_integrity,
            "corruption_results": corruption_results,
            "recovery_rate": recovery_rate
        }


@pytest.mark.robustness
@pytest.mark.recovery
@pytest.mark.slow
class TestAdvancedRecovery:
    """Tests avanc√©s de r√©cup√©ration"""
    
    @pytest.mark.asyncio
    async def test_system_state_reconstruction(self, recovery_test_components):
        """Test reconstruction √©tat syst√®me complet"""
        simulator = RecoverySimulator()
        
        print("üèóÔ∏è  Test reconstruction √©tat syst√®me")
        
        # Cr√©er √©tat syst√®me complexe
        system_state = {
            "portfolios": [
                asdict(create_test_portfolio(Decimal("100000.00"))) for _ in range(3)
            ],
            "active_strategies": [
                {"name": "momentum", "active": True},
                {"name": "value", "active": False}
            ],
            "market_cache": {
                "AAPL": {"price": 150.0, "timestamp": time.time()},
                "GOOGL": {"price": 2800.0, "timestamp": time.time()}
            },
            "system_config": {
                "risk_tolerance": 0.7,
                "max_position_size": 0.1,
                "rebalance_frequency": "daily"
            }
        }
        
        # Snapshot √©tat complet
        simulator.create_data_snapshot("full_system_state", system_state)
        
        # Simuler perte √©tat syst√®me
        print(f"   üí• Simulation perte √©tat syst√®me...")
        
        with simulator.simulate_system_crash("hardware_failure"):
            # Simular √©tat syst√®me vide/corrompu
            corrupted_state = {
                "portfolios": [],
                "active_strategies": [],
                "market_cache": {},
                "system_config": {}
            }
            
            # D√©tecter perte de donn√©es
            state_empty = (
                len(corrupted_state["portfolios"]) == 0 and
                len(corrupted_state["active_strategies"]) == 0 and
                len(corrupted_state["market_cache"]) == 0
            )
            
            print(f"   üîç √âtat syst√®me vide d√©tect√©: {'‚úì' if state_empty else '‚úó'}")
            
            if state_empty:
                # Reconstruction depuis snapshot
                print(f"   üîÑ Reconstruction √©tat syst√®me...")
                
                start_reconstruction = time.perf_counter()
                restored_state = simulator.restore_from_snapshot("full_system_state")
                end_reconstruction = time.perf_counter()
                
                reconstruction_time = (end_reconstruction - start_reconstruction) * 1000
                
                # V√©rifier int√©grit√© √©tat reconstruit
                reconstruction_successful = (
                    len(restored_state["portfolios"]) == 3 and
                    len(restored_state["active_strategies"]) == 2 and
                    len(restored_state["market_cache"]) == 2 and
                    "risk_tolerance" in restored_state["system_config"]
                )
                
                print(f"   ‚úÖ Reconstruction {'r√©ussie' if reconstruction_successful else '√©chou√©e'} "
                      f"en {reconstruction_time:.1f}ms")
        
        # V√©rifier coh√©rence apr√®s reconstruction
        integrity_validator = DataIntegrityValidator()
        integrity_checks = []
        
        for i, portfolio_dict in enumerate(restored_state["portfolios"]):
            try:
                portfolio = Portfolio(**portfolio_dict)
                integrity_check = integrity_validator.validate_portfolio_integrity(portfolio)
                integrity_checks.append(integrity_check)
                print(f"   üìä Portfolio {i+1} int√©grit√©: {integrity_check.integrity_score:.2f}")
            except Exception as e:
                print(f"   ‚ùå Erreur reconstruction portfolio {i+1}: {e}")
                integrity_checks.append(DataIntegrityCheck(
                    check_name=f"portfolio_{i+1}",
                    data_consistent=False,
                    corruption_detected=True,
                    missing_data_count=1,
                    duplicate_data_count=0,
                    invalid_data_count=0,
                    integrity_score=0.0
                ))
        
        # Score global reconstruction
        avg_integrity = sum(check.integrity_score for check in integrity_checks) / len(integrity_checks)
        reconstruction_score = 1.0 if reconstruction_successful and avg_integrity >= 0.9 else avg_integrity
        
        print(f"\nüìä Score reconstruction syst√®me: {reconstruction_score:.2f}")
        
        # Assertions reconstruction syst√®me
        assert reconstruction_successful  # Reconstruction doit r√©ussir
        assert avg_integrity >= 0.8  # Int√©grit√© moyenne au moins 80%
        assert reconstruction_time < 2000  # Moins de 2 secondes
        
        return {
            "reconstruction_successful": reconstruction_successful,
            "reconstruction_time_ms": reconstruction_time,
            "integrity_checks": integrity_checks,
            "avg_integrity": avg_integrity,
            "reconstruction_score": reconstruction_score
        }


if __name__ == "__main__":
    # Ex√©cution directe pour tests de d√©veloppement
    pytest.main([__file__, "-v", "--tb=short", "-m", "recovery and not slow"])