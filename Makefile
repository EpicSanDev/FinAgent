# =============================================================================
# FINAGENT - Makefile
# =============================================================================
# Automatisation des t√¢ches de d√©veloppement pour FinAgent

.PHONY: help install install-dev test test-unit test-integration test-cov lint format clean docs build release deploy

# Variables
PYTHON := python
POETRY := poetry
PYTEST := pytest
BLACK := black
RUFF := ruff
MYPY := mypy

# Couleurs pour l'affichage
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
NC := \033[0m # No Color

# =============================================================================
# AIDE
# =============================================================================

help: ## Affiche cette aide
	@echo "$(GREEN)ü§ñ FinAgent - Commandes Make Disponibles$(NC)"
	@echo ""
	@echo "$(YELLOW)üì¶ Installation:$(NC)"
	@grep -E '^install.*:.*##' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üß™ Tests:$(NC)"
	@grep -E '^test.*:.*##' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üé® Qualit√© de Code:$(NC)"
	@grep -E '^(lint|format|check).*:.*##' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üìö Documentation:$(NC)"
	@grep -E '^docs.*:.*##' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üöÄ Build & Release:$(NC)"
	@grep -E '^(build|clean|release).*:.*##' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üîß Utilitaires:$(NC)"
	@grep -E '^(setup|init|check).*:.*##' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

# =============================================================================
# INSTALLATION
# =============================================================================

install: ## Installation compl√®te avec Poetry
	@echo "$(GREEN)üì¶ Installation de FinAgent...$(NC)"
	$(POETRY) install
	@echo "$(GREEN)‚úÖ Installation termin√©e!$(NC)"

install-dev: install ## Installation avec d√©pendances de d√©veloppement
	@echo "$(GREEN)üõ†Ô∏è Installation des outils de d√©veloppement...$(NC)"
	$(POETRY) install --with dev
	pre-commit install
	@echo "$(GREEN)‚úÖ Environnement de d√©veloppement pr√™t!$(NC)"

install-pip: ## Installation avec pip (alternative)
	@echo "$(YELLOW)‚ö†Ô∏è Installation avec pip (Poetry recommand√©)$(NC)"
	pip install -r requirements.txt
	pip install -e .

# =============================================================================
# TESTS
# =============================================================================

test: ## Lance tous les tests
	@echo "$(GREEN)üß™ Lancement de tous les tests...$(NC)"
	$(POETRY) run $(PYTEST) tests/ -v

test-unit: ## Lance les tests unitaires seulement
	@echo "$(GREEN)üî¨ Tests unitaires...$(NC)"
	$(POETRY) run $(PYTEST) tests/unit/ -v

test-integration: ## Lance les tests d'int√©gration seulement
	@echo "$(GREEN)üîó Tests d'int√©gration...$(NC)"
	$(POETRY) run $(PYTEST) tests/integration/ -v

test-security: ## Lance les tests de s√©curit√©
	@echo "$(GREEN)üõ°Ô∏è Tests de s√©curit√©...$(NC)"
	$(POETRY) run $(PYTEST) tests/security/ -v

test-cov: ## Lance les tests avec couverture de code
	@echo "$(GREEN)üìä Tests avec couverture...$(NC)"
	$(POETRY) run $(PYTEST) --cov=finagent --cov-report=html --cov-report=term-missing
	@echo "$(YELLOW)üìà Rapport de couverture g√©n√©r√© dans htmlcov/$(NC)"

test-watch: ## Lance les tests en mode watch (relance automatique)
	@echo "$(GREEN)üëÄ Tests en mode watch...$(NC)"
	$(POETRY) run $(PYTEST) tests/ -v --watch

# =============================================================================
# QUALIT√â DE CODE
# =============================================================================

lint: ## Lance tous les outils de linting
	@echo "$(GREEN)üîç Linting du code...$(NC)"
	$(POETRY) run $(RUFF) check finagent tests
	$(POETRY) run $(MYPY) finagent
	@echo "$(GREEN)‚úÖ Linting termin√©!$(NC)"

format: ## Formate automatiquement le code
	@echo "$(GREEN)üé® Formatage du code...$(NC)"
	$(POETRY) run $(BLACK) finagent tests
	$(POETRY) run $(RUFF) check --fix finagent tests
	@echo "$(GREEN)‚úÖ Code format√©!$(NC)"

check: lint test-unit ## V√©rification compl√®te (lint + tests unitaires)
	@echo "$(GREEN)‚úÖ V√©rification compl√®te termin√©e!$(NC)"

check-all: lint test ## V√©rification exhaustive (lint + tous les tests)
	@echo "$(GREEN)‚úÖ V√©rification exhaustive termin√©e!$(NC)"

# =============================================================================
# DOCUMENTATION
# =============================================================================

docs: ## G√©n√®re la documentation
	@echo "$(GREEN)üìö G√©n√©ration de la documentation...$(NC)"
	# TODO: Impl√©menter la g√©n√©ration de docs (Sphinx/MkDocs)
	@echo "$(YELLOW)üí° Documentation √† impl√©menter$(NC)"

docs-serve: ## Lance le serveur de documentation
	@echo "$(GREEN)üåê Serveur de documentation...$(NC)"
	# TODO: Impl√©menter le serveur de docs
	@echo "$(YELLOW)üí° Serveur de documentation √† impl√©menter$(NC)"

# =============================================================================
# NETTOYAGE
# =============================================================================

clean: ## Nettoie les fichiers temporaires
	@echo "$(GREEN)üßπ Nettoyage...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/
	rm -rf dist/
	rm -rf .coverage
	rm -rf htmlcov/
	rm -rf .pytest_cache/
	rm -rf .mypy_cache/
	@echo "$(GREEN)‚úÖ Nettoyage termin√©!$(NC)"

clean-data: ## Nettoie les donn√©es locales (ATTENTION: perte de donn√©es!)
	@echo "$(RED)‚ö†Ô∏è ATTENTION: Suppression des donn√©es locales!$(NC)"
	@read -p "√ätes-vous s√ªr? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo ""; \
		echo "$(YELLOW)üóëÔ∏è Suppression des donn√©es...$(NC)"; \
		rm -rf data/cache/* data/logs/* data/exports/* data/backups/*; \
		echo "$(GREEN)‚úÖ Donn√©es supprim√©es!$(NC)"; \
	else \
		echo ""; \
		echo "$(GREEN)‚ùå Suppression annul√©e$(NC)"; \
	fi

# =============================================================================
# BUILD ET RELEASE
# =============================================================================

build: clean ## Build le package
	@echo "$(GREEN)üèóÔ∏è Build du package...$(NC)"
	$(POETRY) build
	@echo "$(GREEN)‚úÖ Package cr√©√© dans dist/$(NC)"

release-check: ## V√©rifie que tout est pr√™t pour une release
	@echo "$(GREEN)üîç V√©rification pre-release...$(NC)"
	$(POETRY) run $(PYTEST) tests/
	$(POETRY) run $(RUFF) check finagent tests
	$(POETRY) run $(MYPY) finagent
	@echo "$(GREEN)‚úÖ Pr√™t pour la release!$(NC)"

release: release-check build ## Pr√©pare une release compl√®te
	@echo "$(GREEN)üöÄ Pr√©paration de la release...$(NC)"
	# TODO: Ajouter les √©tapes de release (git tag, upload PyPI, etc.)
	@echo "$(GREEN)‚úÖ Release pr√©par√©e!$(NC)"

# =============================================================================
# D√âVELOPPEMENT
# =============================================================================

setup: install-dev ## Configuration compl√®te de l'environnement de d√©veloppement
	@echo "$(GREEN)‚öôÔ∏è Configuration de l'environnement...$(NC)"
	mkdir -p data/{cache,logs,backups,exports,strategies}
	cp .env.example .env || echo "$(YELLOW)‚ö†Ô∏è .env existe d√©j√†$(NC)"
	@echo "$(GREEN)‚úÖ Environnement configur√©!$(NC)"
	@echo "$(YELLOW)üí° N'oubliez pas de configurer vos cl√©s API dans .env$(NC)"

init: setup ## Initialisation compl√®te du projet (alias pour setup)

run: ## Lance FinAgent
	@echo "$(GREEN)üöÄ Lancement de FinAgent...$(NC)"
	$(POETRY) run finagent

run-dev: ## Lance FinAgent en mode d√©veloppement
	@echo "$(GREEN)üõ†Ô∏è Lancement en mode d√©veloppement...$(NC)"
	$(POETRY) run finagent --debug

# =============================================================================
# VALIDATION ET S√âCURIT√â
# =============================================================================

security-check: ## V√©rifie les vuln√©rabilit√©s de s√©curit√©
	@echo "$(GREEN)üîí V√©rification de s√©curit√©...$(NC)"
	$(POETRY) run safety check
	$(POETRY) run bandit -r finagent/

deps-check: ## V√©rifie les d√©pendances
	@echo "$(GREEN)üì¶ V√©rification des d√©pendances...$(NC)"
	$(POETRY) show --outdated

# =============================================================================
# UTILITAIRES
# =============================================================================

shell: ## Lance un shell Poetry
	$(POETRY) shell

version: ## Affiche la version
	@echo "$(GREEN)FinAgent version:$(NC)"
	$(POETRY) run finagent --version

info: ## Affiche les informations du projet
	@echo "$(GREEN)üìã Informations du projet:$(NC)"
	@echo "Python: $$(python --version)"
	@echo "Poetry: $$(poetry --version)"
	@echo "R√©pertoire: $$(pwd)"
	@echo "Git branch: $$(git branch --show-current 2>/dev/null || echo 'Non-git')"

# =============================================================================
# HOOKS ET AUTOMATION
# =============================================================================

pre-commit: format lint test-unit ## Ex√©cute les v√©rifications pre-commit

ci: lint test test-cov ## Pipeline CI/CD complet
	@echo "$(GREEN)‚úÖ Pipeline CI termin√© avec succ√®s!$(NC)"

# =============================================================================
# AIDE CONTEXTUELLE
# =============================================================================

# Affiche l'aide par d√©faut si aucune cible n'est sp√©cifi√©e
.DEFAULT_GOAL := help