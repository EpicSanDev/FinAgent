"""
Point d'entr√©e principal de FinAgent

Ce module contient la fonction main() qui initialise l'application,
configure les services essentiels et lance l'interface CLI.
"""

import sys
import asyncio
from pathlib import Path
from typing import Optional

import click
from rich.console import Console
from rich.traceback import install

# Imports locaux (√† impl√©menter)
# from finagent.core.logging.logger import setup_logging
# from finagent.core.errors.error_handler import setup_error_handling
# from finagent.config.settings import Settings
# from finagent.cli.main import cli
# from finagent.core.dependency_injection.container import setup_container

# Installation des tracebacks riches pour le d√©veloppement
install(show_locals=True)

# Console pour les sorties
console = Console()


def print_welcome():
    """Affiche le message de bienvenue."""
    from finagent import WELCOME_MESSAGE
    console.print(WELCOME_MESSAGE, style="cyan")


def check_requirements() -> bool:
    """
    V√©rifie que tous les pr√©requis sont install√©s.
    
    Returns:
        bool: True si tous les pr√©requis sont satisfaits
    """
    try:
        # V√©rification des imports critiques
        import pandas  # noqa: F401
        import openbb  # noqa: F401
        import openai  # noqa: F401
        import sqlalchemy  # noqa: F401
        
        console.print("‚úÖ Toutes les d√©pendances sont install√©es", style="green")
        return True
        
    except ImportError as e:
        console.print(f"‚ùå D√©pendance manquante: {e}", style="red")
        console.print("üí° Ex√©cutez: poetry install ou pip install -r requirements.txt", style="yellow")
        return False


def setup_data_directories():
    """Cr√©e les r√©pertoires de donn√©es n√©cessaires."""
    data_dirs = [
        "data/cache",
        "data/logs", 
        "data/backups",
        "data/exports",
        "data/strategies"
    ]
    
    for dir_path in data_dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
    
    console.print("üìÅ R√©pertoires de donn√©es initialis√©s", style="green")


def initialize_app() -> bool:
    """
    Initialise l'application FinAgent.
    
    Returns:
        bool: True si l'initialisation r√©ussit
    """
    try:
        # TODO: Impl√©menter l'initialisation compl√®te
        # 1. Charger la configuration
        # settings = Settings()
        
        # 2. Configurer le logging
        # setup_logging(settings.logging)
        
        # 3. Configurer la gestion d'erreurs  
        # setup_error_handling()
        
        # 4. Initialiser le conteneur DI
        # setup_container()
        
        # 5. V√©rifier la connectivit√© aux APIs
        # await verify_api_connections()
        
        console.print("üöÄ FinAgent initialis√© avec succ√®s", style="green")
        return True
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'initialisation: {e}", style="red")
        return False


@click.command()
@click.option(
    "--config", 
    "-c",
    type=click.Path(exists=True),
    default="config.yaml",
    help="Chemin vers le fichier de configuration"
)
@click.option(
    "--verbose", 
    "-v",
    is_flag=True,
    help="Active le mode verbose"
)
@click.option(
    "--debug",
    is_flag=True,
    help="Active le mode debug"
)
@click.version_option()
def main(config: Optional[str], verbose: bool, debug: bool):
    """
    ü§ñ FinAgent - Agent IA pour analyse d'actions financi√®res
    
    Analysez vos investissements avec l'intelligence artificielle Claude
    et les donn√©es financi√®res de qualit√© institutionnelle d'OpenBB.
    """
    
    # Affichage du message de bienvenue
    if not debug:
        print_welcome()
    
    # Configuration du mode verbose
    if verbose:
        console.print("üîç Mode verbose activ√©", style="yellow")
    
    if debug:
        console.print("üêõ Mode debug activ√©", style="yellow")
        
    # V√©rification des pr√©requis
    console.print("üîç V√©rification des pr√©requis...", style="blue")
    if not check_requirements():
        sys.exit(1)
    
    # Configuration des r√©pertoires
    setup_data_directories()
    
    # Initialisation de l'application
    console.print("‚öôÔ∏è  Initialisation de FinAgent...", style="blue")
    if not initialize_app():
        sys.exit(1)
    
    # TODO: Lancement de l'interface CLI principale
    console.print("üí° Interface CLI en cours de d√©veloppement...", style="yellow")
    console.print("üéØ Commandes √† venir:", style="cyan")
    console.print("   ‚Ä¢ finagent analyze --symbol AAPL", style="dim")
    console.print("   ‚Ä¢ finagent strategy create --template momentum", style="dim")
    console.print("   ‚Ä¢ finagent portfolio status", style="dim")
    console.print("   ‚Ä¢ finagent config setup", style="dim")
    
    # Pour le moment, juste confirmer que l'app d√©marre
    console.print("‚úÖ FinAgent d√©marr√© avec succ√®s!", style="green bold")


def cli_entry_point():
    """
    Point d'entr√©e pour le script console d√©fini dans pyproject.toml.
    Cette fonction sera appel√©e quand on execute 'finagent' en ligne de commande.
    """
    try:
        main()
    except KeyboardInterrupt:
        console.print("\nüëã Au revoir!", style="yellow")
        sys.exit(0)
    except Exception as e:
        console.print(f"\nüí• Erreur inattendue: {e}", style="red bold")
        if "--debug" in sys.argv:
            raise
        sys.exit(1)


if __name__ == "__main__":
    cli_entry_point()