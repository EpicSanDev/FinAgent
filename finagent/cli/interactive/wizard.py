"""
Assistant de configuration (Wizard) pour FinAgent.

Fournit une interface guid√©e pour configurer FinAgent
√©tape par √©tape pour les nouveaux utilisateurs.
"""

import asyncio
from typing import Dict, Any, Optional, List, Tuple
from pathlib import Path
import json

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Prompt, Confirm, IntPrompt, FloatPrompt
from rich.text import Text
from rich.align import Align

console = Console()


class FinAgentWizard:
    """Assistant de configuration guid√© pour FinAgent."""
    
    def __init__(self):
        """Initialise le wizard."""
        self.config = {}
        self.current_step = 0
        self.total_steps = 7
        self.user_selections = {}
        
        # √âtapes du wizard
        self.steps = [
            {
                'name': 'welcome',
                'title': 'üéâ Bienvenue dans FinAgent',
                'description': 'Introduction et v√©rification des pr√©requis'
            },
            {
                'name': 'user_profile',
                'title': 'üë§ Profil Utilisateur',
                'description': 'D√©finition de votre profil d\'investisseur'
            },
            {
                'name': 'api_keys',
                'title': 'üîë Cl√©s API',
                'description': 'Configuration des acc√®s aux services externes'
            },
            {
                'name': 'portfolio_settings',
                'title': 'üìä Configuration Portefeuille',
                'description': 'Param√®tres de gestion de portefeuille'
            },
            {
                'name': 'ai_preferences',
                'title': 'ü§ñ Pr√©f√©rences IA',
                'description': 'Configuration du moteur d\'analyse IA'
            },
            {
                'name': 'data_sources',
                'title': 'üìä Sources de Donn√©es',
                'description': 'Configuration des fournisseurs de donn√©es'
            },
            {
                'name': 'finalization',
                'title': '‚úÖ Finalisation',
                'description': 'Validation et sauvegarde de la configuration'
            }
        ]
    
    def _show_progress(self) -> None:
        """Affiche la progression du wizard."""
        progress_text = f"√âtape {self.current_step + 1}/{self.total_steps}"
        current_step = self.steps[self.current_step]
        
        # Barre de progression visuelle
        progress_bar = "‚ñà" * (self.current_step + 1) + "‚ñë" * (self.total_steps - self.current_step - 1)
        
        console.print(Panel(
            f"[bold blue]{current_step['title']}[/bold blue]\n"
            f"{current_step['description']}\n\n"
            f"[cyan]{progress_text}[/cyan] {progress_bar}",
            border_style="blue",
            width=60
        ))
        console.print()
    
    def _step_welcome(self) -> bool:
        """√âtape 1: Bienvenue et introduction."""
        self._show_progress()
        
        welcome_text = """
[bold green]üöÄ Bienvenue dans l'assistant de configuration FinAgent ![/bold green]

Cet assistant vous guidera dans la configuration initiale de FinAgent,
votre agent IA pour l'analyse financi√®re et la gestion de portefeuilles.

[yellow]üìã Ce que nous allons configurer :[/yellow]
‚Ä¢ üë§ Votre profil d'investisseur
‚Ä¢ üîë Les cl√©s API pour acc√©der aux donn√©es
‚Ä¢ üìä Les param√®tres de portefeuille
‚Ä¢ ü§ñ Les pr√©f√©rences du moteur IA
‚Ä¢ üìä Les sources de donn√©es

[cyan]‚è±Ô∏è  Temps estim√© : 5-10 minutes[/cyan]

[dim]üí° Vous pourrez modifier ces param√®tres plus tard avec 'finagent config'[/dim]
        """
        
        console.print(Panel(
            welcome_text.strip(),
            title="üéØ Assistant FinAgent",
            border_style="green",
            expand=False
        ))
        
        if not Confirm.ask("\nüöÄ Pr√™t √† commencer la configuration ?", default=True):
            console.print("‚ùå Configuration annul√©e", style="yellow")
            return False
        
        return True
    
    def _step_user_profile(self) -> bool:
        """√âtape 2: Profil utilisateur."""
        self._show_progress()
        
        console.print("[bold cyan]üë§ D√©finissons votre profil d'investisseur[/bold cyan]\n")
        
        # Exp√©rience en investissement
        experience_choices = {
            'beginner': 'D√©butant (moins de 1 an)',
            'intermediate': 'Interm√©diaire (1-5 ans)', 
            'advanced': 'Avanc√© (5+ ans)',
            'expert': 'Expert (professionnel)'
        }
        
        console.print("üìà [yellow]Quelle est votre exp√©rience en investissement ?[/yellow]")
        for key, desc in experience_choices.items():
            console.print(f"  ‚Ä¢ {key}: {desc}")
        
        experience = Prompt.ask(
            "Votre choix",
            choices=list(experience_choices.keys()),
            default='intermediate'
        )
        
        # Tol√©rance au risque
        risk_choices = {
            'conservative': 'Conservateur - Pr√©server le capital',
            'moderate': 'Mod√©r√© - √âquilibre risque/rendement',
            'aggressive': 'Agressif - Maximiser les rendements'
        }
        
        console.print("\n‚öñÔ∏è  [yellow]Quelle est votre tol√©rance au risque ?[/yellow]")
        for key, desc in risk_choices.items():
            console.print(f"  ‚Ä¢ {key}: {desc}")
        
        risk_tolerance = Prompt.ask(
            "Votre choix",
            choices=list(risk_choices.keys()),
            default='moderate'
        )
        
        # Horizon d'investissement
        horizon_choices = {
            'short': 'Court terme (< 2 ans)',
            'medium': 'Moyen terme (2-10 ans)',
            'long': 'Long terme (> 10 ans)'
        }
        
        console.print("\n‚è∞ [yellow]Quel est votre horizon d'investissement principal ?[/yellow]")
        for key, desc in horizon_choices.items():
            console.print(f"  ‚Ä¢ {key}: {desc}")
        
        investment_horizon = Prompt.ask(
            "Votre choix",
            choices=list(horizon_choices.keys()),
            default='medium'
        )
        
        # Capital initial indicatif
        console.print("\nüí∞ [yellow]Capital d'investissement approximatif (pour calibrer les recommandations) ?[/yellow]")
        capital_ranges = [
            "< 10 000 USD",
            "10 000 - 50 000 USD", 
            "50 000 - 250 000 USD",
            "250 000 - 1 000 000 USD",
            "> 1 000 000 USD",
            "Pr√©f√®re ne pas pr√©ciser"
        ]
        
        for i, range_desc in enumerate(capital_ranges, 1):
            console.print(f"  {i}. {range_desc}")
        
        capital_choice = IntPrompt.ask(
            "Votre choix (1-6)",
            choices=[str(i) for i in range(1, 7)],
            default=2
        )
        
        # Sauvegarde du profil
        self.user_selections['profile'] = {
            'experience': experience,
            'risk_tolerance': risk_tolerance,
            'investment_horizon': investment_horizon,
            'capital_range': capital_ranges[capital_choice - 1]
        }
        
        # Configuration d√©riv√©e
        self.config['preferences'] = {
            'risk_tolerance': risk_tolerance,
            'default_currency': 'USD',
            'max_position_size': 0.05 if risk_tolerance == 'conservative' else 0.1 if risk_tolerance == 'moderate' else 0.2,
            'enable_notifications': True,
            'auto_save_decisions': experience in ['beginner', 'intermediate']
        }
        
        # R√©capitulatif
        console.print(f"\n‚úÖ [green]Profil configur√© :[/green]")
        console.print(f"  ‚Ä¢ Exp√©rience: {experience_choices[experience]}")
        console.print(f"  ‚Ä¢ Tol√©rance au risque: {risk_choices[risk_tolerance]}")
        console.print(f"  ‚Ä¢ Horizon: {horizon_choices[investment_horizon]}")
        
        return True
    
    def _step_api_keys(self) -> bool:
        """√âtape 3: Configuration des cl√©s API."""
        self._show_progress()
        
        console.print("[bold cyan]üîë Configuration des cl√©s API[/bold cyan]\n")
        
        api_info = {
            'openrouter': {
                'name': 'OpenRouter',
                'description': 'Acc√®s aux mod√®les IA (Claude, GPT, etc.)',
                'required': True,
                'url': 'https://openrouter.ai/keys'
            },
            'openbb': {
                'name': 'OpenBB',
                'description': 'Donn√©es financi√®res compl√®tes',
                'required': False,
                'url': 'https://my.openbb.co/app/platform/credentials'
            },
            'alpha_vantage': {
                'name': 'Alpha Vantage',
                'description': 'Donn√©es de march√© alternatives',
                'required': False,
                'url': 'https://www.alphavantage.co/support/#api-key'
            }
        }
        
        console.print("[yellow]üí° Les cl√©s API permettent d'acc√©der aux donn√©es et services externes.[/yellow]")
        console.print("[dim]Vous pouvez les configurer plus tard avec 'finagent config set'[/dim]\n")
        
        api_keys = {}
        
        for api_key, info in api_info.items():
            required_text = "[red]REQUIS[/red]" if info['required'] else "[dim]Optionnel[/dim]"
            
            console.print(f"üîó [bold]{info['name']}[/bold] - {required_text}")
            console.print(f"   {info['description']}")
            console.print(f"   üìã Obtenir: [blue]{info['url']}[/blue]")
            
            if info['required'] or Confirm.ask(f"   Configurer {info['name']} maintenant ?", default=False):
                api_key_value = Prompt.ask(
                    f"   Cl√© API {info['name']}",
                    password=True,
                    default=""
                )
                
                if api_key_value:
                    api_keys[api_key] = api_key_value
                    console.print(f"   ‚úÖ [green]Cl√© {info['name']} configur√©e[/green]")
                elif info['required']:
                    console.print(f"   ‚ö†Ô∏è  [yellow]Attention: {info['name']} est requis pour le fonctionnement optimal[/yellow]")
            
            console.print()
        
        self.config['api_keys'] = api_keys
        
        # R√©sum√©
        configured_apis = [name for name in api_keys.keys()]
        if configured_apis:
            console.print(f"‚úÖ [green]APIs configur√©es: {', '.join(configured_apis)}[/green]")
        else:
            console.print("‚ö†Ô∏è  [yellow]Aucune cl√© API configur√©e - fonctionnalit√©s limit√©es[/yellow]")
        
        return True
    
    def _step_portfolio_settings(self) -> bool:
        """√âtape 4: Configuration du portefeuille."""
        self._show_progress()
        
        console.print("[bold cyan]üìä Configuration des param√®tres de portefeuille[/bold cyan]\n")
        
        # Capital initial par d√©faut bas√© sur le profil
        risk_tolerance = self.user_selections['profile']['risk_tolerance']
        suggested_capital = {
            'conservative': 50000,
            'moderate': 100000,
            'aggressive': 250000
        }.get(risk_tolerance, 100000)
        
        # Capital initial
        initial_capital = FloatPrompt.ask(
            f"üí∞ Capital initial par d√©faut pour les backtests (USD)",
            default=suggested_capital
        )
        
        # Benchmark par d√©faut
        benchmark_choices = {
            'SPY': 'S&P 500 (march√© US g√©n√©ral)',
            'QQQ': 'NASDAQ 100 (tech US)',
            'VTI': 'Total Stock Market (march√© US complet)',
            'VXUS': 'International (hors US)',
            'VT': 'Monde entier'
        }
        
        console.print("\nüìà [yellow]Benchmark par d√©faut pour les comparaisons :[/yellow]")
        for key, desc in benchmark_choices.items():
            console.print(f"  ‚Ä¢ {key}: {desc}")
        
        benchmark = Prompt.ask(
            "Votre choix",
            choices=list(benchmark_choices.keys()),
            default='SPY'
        )
        
        # Frais et co√ªts
        console.print("\nüí∏ [yellow]Configuration des frais de transaction[/yellow]")
        
        # Pr√©sets de frais selon le profil
        fee_presets = {
            'conservative': {'commission': 0.0, 'slippage': 0.0001},  # Broker gratuit
            'moderate': {'commission': 0.001, 'slippage': 0.0005},   # Frais moyens
            'aggressive': {'commission': 0.005, 'slippage': 0.001}   # Trading actif
        }
        
        preset_fees = fee_presets[risk_tolerance]
        
        commission_rate = FloatPrompt.ask(
            "Taux de commission par transaction (%)",
            default=preset_fees['commission'] * 100
        ) / 100
        
        slippage_rate = FloatPrompt.ask(
            "Slippage estim√© (%)", 
            default=preset_fees['slippage'] * 100
        ) / 100
        
        # Configuration du portefeuille
        self.config['portfolio'] = {
            'initial_capital': initial_capital,
            'default_benchmark': benchmark,
            'commission_rate': commission_rate,
            'slippage_rate': slippage_rate
        }
        
        # R√©capitulatif
        console.print(f"\n‚úÖ [green]Portefeuille configur√© :[/green]")
        console.print(f"  ‚Ä¢ Capital initial: ${initial_capital:,.0f}")
        console.print(f"  ‚Ä¢ Benchmark: {benchmark} ({benchmark_choices[benchmark]})")
        console.print(f"  ‚Ä¢ Commission: {commission_rate:.3%}")
        console.print(f"  ‚Ä¢ Slippage: {slippage_rate:.3%}")
        
        return True
    
    def _step_ai_preferences(self) -> bool:
        """√âtape 5: Pr√©f√©rences IA."""
        self._show_progress()
        
        console.print("[bold cyan]ü§ñ Configuration du moteur d'analyse IA[/bold cyan]\n")
        
        # Mod√®le IA bas√© sur l'exp√©rience
        experience = self.user_selections['profile']['experience']
        
        model_recommendations = {
            'beginner': 'claude-3-haiku',      # Plus simple et explicatif
            'intermediate': 'claude-3-sonnet', # √âquilibr√©
            'advanced': 'claude-3-opus',       # Plus sophistiqu√©  
            'expert': 'claude-3-opus'          # Maximum de capacit√©s
        }
        
        recommended_model = model_recommendations[experience]
        
        model_choices = {
            'claude-3-haiku': 'Claude 3 Haiku - Rapide et √©conomique',
            'claude-3-sonnet': 'Claude 3 Sonnet - √âquilibr√© (recommand√©)',
            'claude-3-opus': 'Claude 3 Opus - Plus puissant et d√©taill√©'
        }
        
        console.print(f"üß† [yellow]Mod√®le IA recommand√© pour votre profil ({experience}): {recommended_model}[/yellow]\n")
        for key, desc in model_choices.items():
            prefix = "üëâ " if key == recommended_model else "   "
            console.print(f"{prefix}{key}: {desc}")
        
        model = Prompt.ask(
            "Mod√®le √† utiliser",
            choices=list(model_choices.keys()),
            default=recommended_model
        )
        
        # Temp√©rature (cr√©ativit√©)
        temp_recommendations = {
            'conservative': 0.1,  # Tr√®s factuel
            'moderate': 0.3,      # √âquilibr√©
            'aggressive': 0.5     # Plus cr√©atif
        }
        
        risk_tolerance = self.user_selections['profile']['risk_tolerance']
        recommended_temp = temp_recommendations[risk_tolerance]
        
        console.print(f"\nüå°Ô∏è  [yellow]Temp√©rature du mod√®le (cr√©ativit√© des analyses)[/yellow]")
        console.print("   ‚Ä¢ 0.0-0.2: Tr√®s factuel et conservateur")
        console.print("   ‚Ä¢ 0.3-0.5: √âquilibr√© entre faits et interpr√©tation")
        console.print("   ‚Ä¢ 0.6-1.0: Plus cr√©atif et exploratoire")
        
        temperature = FloatPrompt.ask(
            f"Temp√©rature (recommand√© pour votre profil: {recommended_temp})",
            default=recommended_temp
        )
        
        # Seuil de confiance
        confidence_recommendations = {
            'beginner': 0.8,      # Seuil √©lev√© pour plus de s√©curit√©
            'intermediate': 0.7,  # √âquilibr√©
            'advanced': 0.6,      # Plus flexible
            'expert': 0.5         # Tr√®s flexible
        }
        
        recommended_confidence = confidence_recommendations[experience]
        
        confidence_threshold = FloatPrompt.ask(
            f"Seuil de confiance minimum pour les recommandations (0-1, recommand√©: {recommended_confidence})",
            default=recommended_confidence
        )
        
        # Options avanc√©es
        enable_reasoning = Confirm.ask(
            "Activer l'explication d√©taill√©e du raisonnement ?",
            default=True
        )
        
        self.config['ai'] = {
            'model': model,
            'temperature': temperature,
            'confidence_threshold': confidence_threshold,
            'enable_reasoning': enable_reasoning,
            'max_tokens': 4000
        }
        
        # R√©capitulatif
        console.print(f"\n‚úÖ [green]IA configur√©e :[/green]")
        console.print(f"  ‚Ä¢ Mod√®le: {model}")
        console.print(f"  ‚Ä¢ Temp√©rature: {temperature}")
        console.print(f"  ‚Ä¢ Seuil de confiance: {confidence_threshold}")
        console.print(f"  ‚Ä¢ Raisonnement d√©taill√©: {'Oui' if enable_reasoning else 'Non'}")
        
        return True
    
    def _step_data_sources(self) -> bool:
        """√âtape 6: Sources de donn√©es."""
        self._show_progress()
        
        console.print("[bold cyan]üìä Configuration des sources de donn√©es[/bold cyan]\n")
        
        # Fournisseur principal
        if 'openbb' in self.config.get('api_keys', {}):
            default_provider = 'openbb'
        else:
            default_provider = 'yahoo'  # Gratuit par d√©faut
        
        provider_choices = {
            'openbb': 'OpenBB Platform (recommand√© si cl√© configur√©e)',
            'yahoo': 'Yahoo Finance (gratuit, limit√©)',
            'alpha_vantage': 'Alpha Vantage (si cl√© configur√©e)'
        }
        
        console.print("[yellow]üì° Fournisseur principal de donn√©es financi√®res :[/yellow]")
        for key, desc in provider_choices.items():
            prefix = "üëâ " if key == default_provider else "   "
            console.print(f"{prefix}{key}: {desc}")
        
        data_provider = Prompt.ask(
            "Votre choix",
            choices=list(provider_choices.keys()),
            default=default_provider
        )
        
        # Fr√©quence de mise √† jour
        update_frequencies = {
            '1m': 'Temps r√©el (1 minute) - Pour trading actif',
            '5m': '5 minutes - Suivi fr√©quent',
            '1h': '1 heure - Suivi r√©gulier (recommand√©)',
            '1d': '1 jour - Suivi quotidien'
        }
        
        console.print(f"\nüîÑ [yellow]Fr√©quence de mise √† jour des donn√©es :[/yellow]")
        for key, desc in update_frequencies.items():
            console.print(f"  ‚Ä¢ {key}: {desc}")
        
        update_frequency = Prompt.ask(
            "Votre choix",
            choices=list(update_frequencies.keys()),
            default='1h'
        )
        
        # P√©riode historique
        historical_years = IntPrompt.ask(
            "üìÖ Nombre d'ann√©es de donn√©es historiques √† conserver",
            default=5
        )
        
        # Donn√©es temps r√©el
        enable_realtime = False
        if data_provider == 'openbb' and 'openbb' in self.config.get('api_keys', {}):
            enable_realtime = Confirm.ask(
                "Activer les donn√©es temps r√©el ?",
                default=False
            )
        
        self.config['data'] = {
            'data_provider': data_provider,
            'update_frequency': update_frequency,
            'historical_data_years': historical_years,
            'enable_realtime': enable_realtime
        }
        
        # Cache et performance
        cache_duration = {
            '1m': 300,    # 5 minutes
            '5m': 900,    # 15 minutes
            '1h': 3600,   # 1 heure
            '1d': 86400   # 1 jour
        }.get(update_frequency, 3600)
        
        self.config['preferences']['cache_duration'] = cache_duration
        
        # R√©capitulatif
        console.print(f"\n‚úÖ [green]Sources de donn√©es configur√©es :[/green]")
        console.print(f"  ‚Ä¢ Fournisseur: {data_provider}")
        console.print(f"  ‚Ä¢ Mise √† jour: {update_frequency}")
        console.print(f"  ‚Ä¢ Historique: {historical_years} ans")
        console.print(f"  ‚Ä¢ Temps r√©el: {'Oui' if enable_realtime else 'Non'}")
        
        return True
    
    def _step_finalization(self) -> bool:
        """√âtape 7: Finalisation et sauvegarde."""
        self._show_progress()
        
        console.print("[bold cyan]‚úÖ Finalisation de la configuration[/bold cyan]\n")
        
        # Configuration CLI par d√©faut
        self.config['cli'] = {
            'theme': 'auto',
            'verbose': False,
            'show_progress': True,
            'auto_complete': True,
            'color_output': True
        }
        
        # R√©capitulatif complet
        console.print("[bold yellow]üìã R√©capitulatif de votre configuration :[/bold yellow]\n")
        
        profile = self.user_selections['profile']
        
        summary_table = Table(show_header=True, header_style="bold cyan")
        summary_table.add_column("Cat√©gorie", style="cyan")
        summary_table.add_column("Param√®tre", style="white")
        summary_table.add_column("Valeur", style="green")
        
        # Profil utilisateur
        summary_table.add_row("üë§ Profil", "Exp√©rience", profile['experience'].title())
        summary_table.add_row("", "Tol√©rance au risque", profile['risk_tolerance'].title())
        summary_table.add_row("", "Horizon d'investissement", profile['investment_horizon'].title())
        
        # APIs
        apis = list(self.config.get('api_keys', {}).keys())
        summary_table.add_row("üîë APIs", "Configur√©es", ', '.join(apis) if apis else "Aucune")
        
        # Portefeuille
        portfolio = self.config['portfolio']
        summary_table.add_row("üìä Portefeuille", "Capital initial", f"${portfolio['initial_capital']:,.0f}")
        summary_table.add_row("", "Benchmark", portfolio['default_benchmark'])
        summary_table.add_row("", "Commission", f"{portfolio['commission_rate']:.3%}")
        
        # IA
        ai = self.config['ai']
        summary_table.add_row("ü§ñ IA", "Mod√®le", ai['model'])
        summary_table.add_row("", "Temp√©rature", str(ai['temperature']))
        summary_table.add_row("", "Seuil confiance", str(ai['confidence_threshold']))
        
        # Donn√©es
        data = self.config['data']
        summary_table.add_row("üìä Donn√©es", "Fournisseur", data['data_provider'])
        summary_table.add_row("", "Fr√©quence", data['update_frequency'])
        summary_table.add_row("", "Historique", f"{data['historical_data_years']} ans")
        
        console.print(summary_table)
        
        # Validation finale
        console.print()
        if not Confirm.ask("üíæ Sauvegarder cette configuration ?", default=True):
            console.print("‚ùå Configuration non sauvegard√©e", style="yellow")
            return False
        
        # Sauvegarde
        try:
            self._save_configuration()
            
            console.print(Panel(
                "‚úÖ [bold green]Configuration sauvegard√©e avec succ√®s ![/bold green]\n\n"
                "üéâ FinAgent est maintenant configur√© et pr√™t √† √™tre utilis√©.\n\n"
                "[yellow]Prochaines √©tapes :[/yellow]\n"
                "‚Ä¢ Testez avec: [cyan]finagent analyze stock AAPL[/cyan]\n"
                "‚Ä¢ Mode interactif: [cyan]finagent --interactive[/cyan]\n"
                "‚Ä¢ Aide compl√®te: [cyan]finagent --help[/cyan]\n\n"
                "[dim]üí° Vous pouvez modifier la configuration plus tard avec:[/dim]\n"
                "[dim]   finagent config show[/dim]\n"
                "[dim]   finagent config set section.key value[/dim]",
                title="üéØ Configuration Termin√©e",
                border_style="green"
            ))
            
            return True
            
        except Exception as e:
            console.print(f"‚ùå Erreur lors de la sauvegarde: {e}", style="red")
            return False
    
    def _save_configuration(self) -> None:
        """Sauvegarde la configuration finale."""
        config_dir = Path.home() / '.finagent'
        config_dir.mkdir(exist_ok=True)
        
        config_file = config_dir / 'config.json'
        
        with open(config_file, 'w') as f:
            json.dump(self.config, f, indent=2)
        
        console.print(f"üìÅ Configuration sauvegard√©e: {config_file}", style="dim")
    
    async def run(self) -> bool:
        """Lance le wizard complet."""
        console.clear()
        
        try:
            # Ex√©cution s√©quentielle des √©tapes
            step_methods = [
                self._step_welcome,
                self._step_user_profile,
                self._step_api_keys,
                self._step_portfolio_settings,
                self._step_ai_preferences,
                self._step_data_sources,
                self._step_finalization
            ]
            
            for i, step_method in enumerate(step_methods):
                self.current_step = i
                
                if not step_method():
                    console.print("\n‚ùå Configuration interrompue", style="yellow")
                    return False
                
                # Pause entre les √©tapes (sauf la derni√®re)
                if i < len(step_methods) - 1:
                    console.print()
                    if not Confirm.ask("‚û°Ô∏è  Continuer vers l'√©tape suivante ?", default=True):
                        console.print("‚ùå Configuration interrompue", style="yellow")
                        return False
                    
                    console.clear()
            
            return True
            
        except KeyboardInterrupt:
            console.print("\n‚ùå Configuration interrompue par l'utilisateur", style="yellow")
            return False
        
        except Exception as e:
            console.print(f"\n‚ùå Erreur durant la configuration: {e}", style="red")
            return False


# === Fonctions utilitaires ===

async def run_wizard() -> bool:
    """Lance l'assistant de configuration."""
    wizard = FinAgentWizard()
    return await wizard.run()


def run_wizard_sync() -> bool:
    """Lance l'assistant de configuration de mani√®re synchrone."""
    return asyncio.run(run_wizard())


if __name__ == "__main__":
    # Test du wizard
    success = run_wizard_sync()
    if success:
        console.print("üéâ Wizard termin√© avec succ√®s !", style="green")
    else:
        console.print("‚ùå Wizard interrompu", style="red")