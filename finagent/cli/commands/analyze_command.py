"""
Commande d'analyse pour la CLI FinAgent.

Cette commande permet d'analyser des symboles boursiers avec
des donn√©es compl√®tes, indicateurs techniques et analyse IA.
"""

import asyncio
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta

import click
from rich.console import Console
from rich.panel import Panel

from ..formatters import MarketFormatter, AnalysisFormatter
from ..utils import (
    SYMBOL, TIMEFRAME, PERCENTAGE,
    with_progress, ValidationError,
    progress_manager, spinner_manager
)

# Imports des services (√† adapter selon l'architecture finale)
# from finagent.ai.services.analysis_service import AnalysisService
# from finagent.business.decision.decision_engine import DecisionEngine
# from finagent.data.providers.openbb_provider import OpenBBProvider

console = Console()


@click.group()
def analyze():
    """Commandes d'analyse d'actions et de march√©s."""
    pass


@analyze.command()
@click.argument('symbol', type=SYMBOL)
@click.option(
    '--timeframe', '-t',
    type=TIMEFRAME,
    default='1d',
    help='P√©riode d\'analyse (1d, 1w, 1mo, 1y, etc.)'
)
@click.option(
    '--indicators', '-i',
    multiple=True,
    type=click.Choice(['sma', 'ema', 'rsi', 'macd', 'bollinger', 'all']),
    default=['rsi', 'macd'],
    help='Indicateurs techniques √† inclure'
)
@click.option(
    '--depth', '-d',
    type=click.Choice(['basic', 'standard', 'detailed', 'full']),
    default='standard',
    help='Profondeur de l\'analyse'
)
@click.option(
    '--period', '-p',
    type=int,
    default=252,
    help='Nombre de p√©riodes pour l\'analyse historique'
)
@click.option(
    '--include-sentiment', '-s',
    is_flag=True,
    help='Inclure l\'analyse de sentiment'
)
@click.option(
    '--include-fundamental', '-f',
    is_flag=True,
    help='Inclure l\'analyse fondamentale'
)
@click.option(
    '--save-report', '-r',
    type=click.Path(),
    help='Sauvegarder le rapport dans un fichier'
)
@click.option(
    '--format',
    type=click.Choice(['table', 'json', 'yaml']),
    default='table',
    help='Format de sortie'
)
@click.option(
    '--cache/--no-cache',
    default=True,
    help='Utiliser le cache pour les donn√©es'
)
@click.pass_context
def stock(ctx, symbol: str, timeframe: str, indicators: tuple, depth: str,
          period: int, include_sentiment: bool, include_fundamental: bool,
          save_report: Optional[str], format: str, cache: bool):
    """
    Analyse une action sp√©cifique avec donn√©es compl√®tes et IA.
    
    SYMBOL: Symbole de l'action √† analyser (ex: AAPL, MSFT)
    
    Exemples:
    \b
        finagent analyze stock AAPL
        finagent analyze stock MSFT --timeframe 1w --indicators all
        finagent analyze stock TSLA --depth full --include-sentiment
    """
    try:
        # Configuration depuis le contexte
        config_path = ctx.obj.get('config') if ctx.obj else None
        verbose = ctx.obj.get('verbose', False) if ctx.obj else False
        
        if verbose:
            console.print(f"üîç Analyse de {symbol} en cours...", style="blue")
            console.print(f"üìä Timeframe: {timeframe}, Profondeur: {depth}", style="dim")
        
        # Ex√©cution de l'analyse
        analysis_result = asyncio.run(_perform_stock_analysis(
            symbol=symbol,
            timeframe=timeframe,
            indicators=list(indicators),
            depth=depth,
            period=period,
            include_sentiment=include_sentiment,
            include_fundamental=include_fundamental,
            use_cache=cache,
            verbose=verbose
        ))
        
        # Formatage et affichage
        _display_analysis_result(analysis_result, format, symbol)
        
        # Sauvegarde si demand√©e
        if save_report:
            _save_analysis_report(analysis_result, save_report, format)
            console.print(f"‚úÖ Rapport sauvegard√©: {save_report}", style="green")
    
    except ValidationError as e:
        console.print(f"‚ùå Erreur de validation: {e.message}", style="red")
        if e.suggestions:
            console.print(f"üí° Suggestions: {', '.join(e.suggestions)}", style="yellow")
        ctx.exit(1)
    
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'analyse: {e}", style="red")
        if verbose:
            console.print_exception()
        ctx.exit(1)


@analyze.command()
@click.argument('symbols', nargs=-1, type=SYMBOL, required=True)
@click.option(
    '--timeframe', '-t',
    type=TIMEFRAME,
    default='1d',
    help='P√©riode d\'analyse'
)
@click.option(
    '--compare-metric',
    type=click.Choice(['performance', 'volatility', 'volume', 'sentiment']),
    default='performance',
    help='M√©trique de comparaison'
)
@click.option(
    '--sort-by',
    type=click.Choice(['symbol', 'performance', 'volume', 'market_cap']),
    default='performance',
    help='Crit√®re de tri'
)
@click.option(
    '--limit', '-l',
    type=int,
    default=10,
    help='Nombre maximum de r√©sultats'
)
@click.pass_context
def compare(ctx, symbols: tuple, timeframe: str, compare_metric: str,
           sort_by: str, limit: int):
    """
    Compare plusieurs actions selon diff√©rents crit√®res.
    
    SYMBOLS: Liste des symboles √† comparer (ex: AAPL MSFT GOOGL)
    
    Exemples:
    \b
        finagent analyze compare AAPL MSFT GOOGL
        finagent analyze compare AAPL MSFT --compare-metric volatility
        finagent analyze compare TECH.xlsx --timeframe 1w
    """
    try:
        verbose = ctx.obj.get('verbose', False) if ctx.obj else False
        
        if verbose:
            console.print(f"‚öñÔ∏è  Comparaison de {len(symbols)} symboles", style="blue")
        
        # Validation du nombre de symboles
        if len(symbols) < 2:
            raise ValidationError("Au moins 2 symboles sont requis pour la comparaison")
        
        if len(symbols) > 20:
            console.print("‚ö†Ô∏è  Limitation √† 20 symboles pour la performance", style="yellow")
            symbols = symbols[:20]
        
        # Ex√©cution de la comparaison
        comparison_result = asyncio.run(_perform_stock_comparison(
            symbols=list(symbols),
            timeframe=timeframe,
            compare_metric=compare_metric,
            sort_by=sort_by,
            limit=limit,
            verbose=verbose
        ))
        
        # Affichage des r√©sultats
        _display_comparison_result(comparison_result, compare_metric)
    
    except ValidationError as e:
        console.print(f"‚ùå Erreur de validation: {e.message}", style="red")
        ctx.exit(1)
    
    except Exception as e:
        console.print(f"‚ùå Erreur lors de la comparaison: {e}", style="red")
        if verbose:
            console.print_exception()
        ctx.exit(1)


@analyze.command()
@click.option(
    '--market',
    type=click.Choice(['US', 'EU', 'ASIA', 'GLOBAL']),
    default='US',
    help='March√© √† analyser'
)
@click.option(
    '--sectors', '-s',
    multiple=True,
    type=click.Choice(['tech', 'finance', 'healthcare', 'energy', 'consumer', 'all']),
    default=['all'],
    help='Secteurs √† inclure'
)
@click.option(
    '--timeframe', '-t',
    type=TIMEFRAME,
    default='1d',
    help='P√©riode d\'analyse'
)
@click.pass_context
def market(ctx, market: str, sectors: tuple, timeframe: str):
    """
    Analyse l'√©tat g√©n√©ral du march√© et des secteurs.
    
    Exemples:
    \b
        finagent analyze market
        finagent analyze market --market EU --sectors tech finance
        finagent analyze market --timeframe 1w
    """
    try:
        verbose = ctx.obj.get('verbose', False) if ctx.obj else False
        
        if verbose:
            console.print(f"üåç Analyse du march√© {market} en cours...", style="blue")
        
        # Ex√©cution de l'analyse de march√©
        market_result = asyncio.run(_perform_market_analysis(
            market=market,
            sectors=list(sectors),
            timeframe=timeframe,
            verbose=verbose
        ))
        
        # Affichage des r√©sultats
        _display_market_result(market_result)
    
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'analyse de march√©: {e}", style="red")
        if verbose:
            console.print_exception()
        ctx.exit(1)


# === Fonctions d'impl√©mentation ===

async def _perform_stock_analysis(symbol: str, timeframe: str, indicators: List[str],
                                 depth: str, period: int, include_sentiment: bool,
                                 include_fundamental: bool, use_cache: bool,
                                 verbose: bool) -> Dict[str, Any]:
    """Effectue l'analyse compl√®te d'une action."""
    
    # Simulation des √©tapes d'analyse pour d√©monstration
    # En r√©alit√©, ces appels seraient faits aux vrais services
    
    with progress_manager.progress_context() as progress:
        # √âtape 1: R√©cup√©ration des donn√©es de march√©
        market_task = progress.add_task("üìä R√©cup√©ration donn√©es de march√©", total=100)
        
        # Simulation de r√©cup√©ration de donn√©es
        for i in range(100):
            await asyncio.sleep(0.01)
            progress.update(market_task, advance=1)
        
        # √âtape 2: Calcul des indicateurs techniques
        if indicators and 'all' not in indicators:
            indicators_task = progress.add_task("üìà Calcul indicateurs techniques", total=len(indicators))
            for indicator in indicators:
                await asyncio.sleep(0.1)
                progress.update(indicators_task, advance=1)
        
        # √âtape 3: Analyse IA
        ai_task = progress.add_task("ü§ñ Analyse par IA", total=100)
        for i in range(100):
            await asyncio.sleep(0.02)
            progress.update(ai_task, advance=1)
        
        # √âtape 4: Analyse de sentiment (si demand√©e)
        if include_sentiment:
            sentiment_task = progress.add_task("üòä Analyse de sentiment", total=100)
            for i in range(100):
                await asyncio.sleep(0.01)
                progress.update(sentiment_task, advance=1)
        
        # √âtape 5: Analyse fondamentale (si demand√©e)
        if include_fundamental:
            fundamental_task = progress.add_task("üìã Analyse fondamentale", total=100)
            for i in range(100):
                await asyncio.sleep(0.015)
                progress.update(fundamental_task, advance=1)
    
    # Simulation du r√©sultat (en r√©alit√©, donn√©es r√©elles des services)
    return {
        "symbol": symbol,
        "analysis_type": "Analyse Compl√®te",
        "timestamp": datetime.now(),
        "timeframe": timeframe,
        "depth": depth,
        "summary": f"Analyse d√©taill√©e de {symbol} sur la p√©riode {timeframe}. Les indicateurs montrent une tendance mod√©r√©ment positive avec quelques signaux de prudence.",
        "confidence_score": 0.75,
        "overall_sentiment": "POSITIF",
        "signals": [
            {"type": "BUY", "message": "RSI en zone de survente", "strength": 0.7},
            {"type": "NEUTRAL", "message": "MACD proche de la ligne de signal", "strength": 0.5},
            {"type": "BUY", "message": "Volume sup√©rieur √† la moyenne", "strength": 0.6}
        ],
        "key_points": [
            "Tendance haussi√®re confirm√©e sur les 5 derni√®res sessions",
            "Support technique solide √† $150.00",
            "R√©sistance attendue autour de $165.00"
        ],
        "risks": [
            "Volatilit√© √©lev√©e observ√©e r√©cemment",
            "R√©sultats trimestriels attendus la semaine prochaine",
            "Incertitude macro-√©conomique globale"
        ],
        "price_levels": {
            "current": 157.45,
            "support": 150.00,
            "resistance": 165.00,
            "target": 172.00
        },
        "technical_indicators": {
            "rsi": {"value": 65.2, "signal": "NEUTRAL"},
            "macd": {"value": 1.23, "signal": "BUY"},
            "sma_20": {"value": 155.8, "signal": "BUY"},
            "bollinger_position": {"value": 0.7, "signal": "NEUTRAL"}
        }
    }


async def _perform_stock_comparison(symbols: List[str], timeframe: str,
                                   compare_metric: str, sort_by: str,
                                   limit: int, verbose: bool) -> Dict[str, Any]:
    """Effectue la comparaison de plusieurs actions."""
    
    with progress_manager.progress_context() as progress:
        comparison_task = progress.add_task(
            f"‚öñÔ∏è  Comparaison de {len(symbols)} symboles",
            total=len(symbols)
        )
        
        results = []
        for symbol in symbols:
            # Simulation de r√©cup√©ration de donn√©es pour chaque symbole
            await asyncio.sleep(0.1)
            
            # Donn√©es simul√©es
            results.append({
                "symbol": symbol,
                "performance_1d": float(f"{(hash(symbol) % 200 - 100) / 10:.2f}"),
                "performance_1w": float(f"{(hash(symbol + 'w') % 300 - 150) / 10:.2f}"),
                "volatility": float(f"{(hash(symbol + 'vol') % 50 + 10) / 100:.3f}"),
                "volume": (hash(symbol + 'volume') % 10000000) + 1000000,
                "market_cap": (hash(symbol + 'cap') % 1000000000000) + 1000000000,
                "sentiment_score": float(f"{(hash(symbol + 'sent') % 100) / 100:.2f}")
            })
            
            progress.update(comparison_task, advance=1)
    
    return {
        "symbols": symbols,
        "timeframe": timeframe,
        "compare_metric": compare_metric,
        "sort_by": sort_by,
        "results": sorted(results, key=lambda x: x.get(sort_by, 0), reverse=True)[:limit]
    }


async def _perform_market_analysis(market: str, sectors: List[str],
                                  timeframe: str, verbose: bool) -> Dict[str, Any]:
    """Effectue l'analyse de march√© global."""
    
    with spinner_manager.spinner_context("üåç Analyse du march√© en cours..."):
        await asyncio.sleep(2)  # Simulation
    
    # Donn√©es simul√©es de march√©
    return {
        "market": market,
        "sectors": sectors,
        "timeframe": timeframe,
        "timestamp": datetime.now(),
        "status": "OUVERT",
        "indices": {
            "S&P 500": {"price": 4567.89, "change_percent": 1.23},
            "NASDAQ": {"price": 14123.45, "change_percent": 0.89},
            "DOW": {"price": 35678.90, "change_percent": 0.67}
        },
        "sectors": {
            "Technology": {"change_percent": 2.1},
            "Healthcare": {"change_percent": 0.8},
            "Finance": {"change_percent": -0.5},
            "Energy": {"change_percent": 1.7},
            "Consumer": {"change_percent": 0.3}
        },
        "sentiment": {
            "overall": "POSITIF",
            "fear_greed_index": 65,
            "vix": 18.5
        }
    }


# === Fonctions d'affichage ===

def _display_analysis_result(result: Dict[str, Any], format: str, symbol: str) -> None:
    """Affiche les r√©sultats d'analyse."""
    if format == 'json':
        import json
        console.print_json(json.dumps(result, default=str, indent=2))
    elif format == 'yaml':
        import yaml
        console.print(yaml.dump(result, default_flow_style=False))
    else:
        # Affichage format√© avec Rich
        formatter = AnalysisFormatter()
        
        # Panel principal d'analyse
        analysis_panel = formatter.format_full_analysis(result)
        console.print(analysis_panel)
        
        # Indicateurs techniques si disponibles
        if 'technical_indicators' in result:
            indicators_table = formatter.format_technical_indicators({
                "symbol": symbol,
                "indicators": result['technical_indicators']
            })
            console.print("\n")
            console.print(indicators_table)


def _display_comparison_result(result: Dict[str, Any], compare_metric: str) -> None:
    """Affiche les r√©sultats de comparaison."""
    from rich.table import Table
    
    table = Table(title=f"‚öñÔ∏è  Comparaison - {compare_metric.title()}", show_header=True)
    
    table.add_column("Symbole", style="cyan bold", no_wrap=True)
    table.add_column("Performance 1J", justify="right")
    table.add_column("Performance 1S", justify="right")
    table.add_column("Volatilit√©", justify="right")
    table.add_column("Volume", justify="right")
    table.add_column("Sentiment", justify="center")
    
    for item in result['results']:
        # Formatage des valeurs
        perf_1d = f"{item['performance_1d']:+.2f}%" 
        perf_1w = f"{item['performance_1w']:+.2f}%"
        volatility = f"{item['volatility']:.1%}"
        volume = f"{item['volume']:,.0f}"
        sentiment = "üòä" if item['sentiment_score'] > 0.6 else "üòê" if item['sentiment_score'] > 0.4 else "üòü"
        
        # Style selon la performance
        perf_style = "green" if item['performance_1d'] > 0 else "red" if item['performance_1d'] < 0 else "white"
        
        table.add_row(
            item['symbol'],
            f"[{perf_style}]{perf_1d}[/{perf_style}]",
            f"[{perf_style}]{perf_1w}[/{perf_style}]",
            volatility,
            volume,
            sentiment
        )
    
    console.print(table)


def _display_market_result(result: Dict[str, Any]) -> None:
    """Affiche les r√©sultats d'analyse de march√©."""
    formatter = MarketFormatter()
    
    # Aper√ßu de march√©
    market_overview = formatter.format_market_overview(result)
    console.print(market_overview)


def _save_analysis_report(result: Dict[str, Any], filepath: str, format: str) -> None:
    """Sauvegarde le rapport d'analyse."""
    from pathlib import Path
    import json
    import yaml
    
    path = Path(filepath)
    path.parent.mkdir(parents=True, exist_ok=True)
    
    if format == 'json':
        with open(path, 'w') as f:
            json.dump(result, f, indent=2, default=str)
    elif format == 'yaml':
        with open(path, 'w') as f:
            yaml.dump(result, f, default_flow_style=False)
    else:
        # Format texte avec formatage Rich
        with open(path, 'w') as f:
            f.write(f"Rapport d'analyse FinAgent\n")
            f.write(f"========================\n\n")
            f.write(f"Symbole: {result.get('symbol', 'N/A')}\n")
            f.write(f"Date: {result.get('timestamp', 'N/A')}\n")
            f.write(f"Type: {result.get('analysis_type', 'N/A')}\n\n")
            f.write(f"R√©sum√©:\n{result.get('summary', 'N/A')}\n\n")
            f.write(f"Score de confiance: {result.get('confidence_score', 0):.1%}\n")