"""
Tests d'int√©gration du syst√®me IA avec OpenRouter.
"""

import asyncio
import os
import sys
from pathlib import Path
import structlog

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from finagent.core.config import Config
from finagent.ai import (
    initialize_ai_system, shutdown_ai_system, get_ai_config,
    FinancialAnalysisRequest, TradingDecisionRequest
)
from finagent.ai.models.base import AIRequest

logger = structlog.get_logger(__name__)


class AIIntegrationTester:
    """Testeur d'int√©gration IA."""
    
    def __init__(self):
        self.config = None
        self.ai_config = None
    
    async def setup(self):
        """Initialise les composants de test."""
        try:
            # Charger la configuration
            self.config = Config()
            
            # V√©rifier les variables d'environnement n√©cessaires
            if not os.getenv("OPENROUTER_API_KEY"):
                print("‚ùå Variable d'environnement OPENROUTER_API_KEY manquante")
                print("   Veuillez d√©finir votre cl√© API OpenRouter:")
                print("   export OPENROUTER_API_KEY=your_key_here")
                return False
            
            # Initialiser le syst√®me IA
            print("üîß Initialisation du syst√®me IA...")
            self.ai_config = await initialize_ai_system(self.config)
            
            print("‚úÖ Syst√®me IA initialis√© avec succ√®s")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation: {e}")
            return False
    
    async def test_provider_connection(self):
        """Teste la connexion au provider Claude."""
        try:
            print("\nüîç Test de connexion au provider Claude...")
            
            provider = self.ai_config.get_provider()
            
            # Test simple de connexion
            request = AIRequest(
                prompt="R√©ponds simplement 'OK' pour confirmer la connexion.",
                model="anthropic/claude-3-haiku-20240307",
                max_tokens=10,
                temperature=0.1
            )
            
            response = await provider.send_request(request)
            
            if response and response.content:
                print(f"‚úÖ Connexion r√©ussie - R√©ponse: {response.content[:50]}...")
                return True
            else:
                print("‚ùå Pas de r√©ponse du provider")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    async def test_analysis_service(self):
        """Teste le service d'analyse financi√®re."""
        try:
            print("\nüìä Test du service d'analyse financi√®re...")
            
            analysis_service = self.ai_config.get_analysis_service()
            
            # Donn√©es de test
            test_data = {
                "symbol": "AAPL",
                "price": 150.00,
                "volume": 1000000,
                "market_cap": 2500000000000,
                "pe_ratio": 25.5,
                "moving_averages": {
                    "ma_20": 148.5,
                    "ma_50": 145.2,
                    "ma_200": 140.8
                }
            }
            
            request = FinancialAnalysisRequest(
                symbol="AAPL",
                market_data=test_data,
                analysis_type="comprehensive",
                time_horizon="medium_term"
            )
            
            response = await analysis_service.analyze_financial_data(request)
            
            if response and response.technical_analysis:
                print("‚úÖ Analyse financi√®re r√©ussie")
                print(f"   - Tendance: {response.technical_analysis.trend}")
                print(f"   - Score: {response.technical_analysis.score}")
                return True
            else:
                print("‚ùå √âchec de l'analyse financi√®re")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur d'analyse: {e}")
            return False
    
    async def test_decision_service(self):
        """Teste le service de d√©cision de trading."""
        try:
            print("\nüéØ Test du service de d√©cision de trading...")
            
            decision_service = self.ai_config.get_decision_service()
            
            # Donn√©es de test
            analysis_data = {
                "symbol": "AAPL",
                "current_price": 150.00,
                "technical_indicators": {
                    "rsi": 65,
                    "macd": "bullish",
                    "moving_averages": "uptrend"
                },
                "fundamental_metrics": {
                    "pe_ratio": 25.5,
                    "revenue_growth": 0.08
                }
            }
            
            request = TradingDecisionRequest(
                symbol="AAPL",
                analysis_data=analysis_data,
                risk_tolerance="medium",
                investment_horizon="medium_term",
                portfolio_context={}
            )
            
            response = await decision_service.make_trading_decision(request)
            
            if response and response.action:
                print("‚úÖ D√©cision de trading r√©ussie")
                print(f"   - Action: {response.action}")
                print(f"   - Confiance: {response.confidence}")
                print(f"   - Retour attendu: {response.expected_return:.2%}")
                return True
            else:
                print("‚ùå √âchec de la d√©cision de trading")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur de d√©cision: {e}")
            return False
    
    async def test_sentiment_service(self):
        """Teste le service d'analyse de sentiment."""
        try:
            print("\nüí≠ Test du service d'analyse de sentiment...")
            
            sentiment_service = self.ai_config.get_sentiment_service()
            
            # Donn√©es de test
            news_data = [
                "Apple reports strong quarterly earnings beating expectations",
                "Tech stocks rally as market confidence grows",
                "Apple announces new product line with innovative features"
            ]
            
            response = await sentiment_service.analyze_market_sentiment(
                symbol="AAPL",
                news_data=news_data,
                social_media_data=[],
                time_window_hours=24
            )
            
            if response and response.overall_sentiment:
                print("‚úÖ Analyse de sentiment r√©ussie")
                print(f"   - Sentiment global: {response.overall_sentiment}")
                print(f"   - Score: {response.sentiment_score:.2f}")
                return True
            else:
                print("‚ùå √âchec de l'analyse de sentiment")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur d'analyse de sentiment: {e}")
            return False
    
    async def test_strategy_service(self):
        """Teste le service d'interpr√©tation de strat√©gie."""
        try:
            print("\nüìã Test du service d'interpr√©tation de strat√©gie...")
            
            strategy_service = self.ai_config.get_strategy_service()
            
            # Strat√©gie de test
            strategy_text = """
            Strat√©gie Momentum Tech:
            - Acheter des actions tech avec RSI < 30
            - Vendre quand RSI > 70
            - Stop loss √† -5%
            - Take profit √† +15%
            """
            
            response = await strategy_service.interpret_strategy(
                strategy_text=strategy_text,
                strategy_name="Momentum Tech"
            )
            
            if response and response.parsed_rules:
                print("‚úÖ Interpr√©tation de strat√©gie r√©ussie")
                print(f"   - Nombre de r√®gles: {len(response.parsed_rules)}")
                print(f"   - Type: {response.strategy_type}")
                return True
            else:
                print("‚ùå √âchec de l'interpr√©tation de strat√©gie")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur d'interpr√©tation: {e}")
            return False
    
    async def test_memory_system(self):
        """Teste le syst√®me de m√©moire."""
        try:
            print("\nüß† Test du syst√®me de m√©moire...")
            
            memory_manager = self.ai_config.get_memory_manager()
            
            # Obtenir les statistiques
            stats = await memory_manager.get_memory_stats()
            
            if stats:
                print("‚úÖ Syst√®me de m√©moire op√©rationnel")
                print(f"   - Cache: {stats.get('cache_size', 0)} entr√©es")
                print(f"   - Persistence: {'activ√©e' if stats.get('persistence_enabled') else 'd√©sactiv√©e'}")
                return True
            else:
                print("‚ùå Syst√®me de m√©moire non op√©rationnel")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur du syst√®me de m√©moire: {e}")
            return False
    
    async def run_integration_tests(self):
        """Lance tous les tests d'int√©gration."""
        print("üöÄ Lancement des tests d'int√©gration IA/OpenRouter")
        print("=" * 60)
        
        # Initialisation
        setup_success = await self.setup()
        if not setup_success:
            return False
        
        # Tests individuels
        tests = [
            ("Connexion Provider", self.test_provider_connection),
            ("Service d'Analyse", self.test_analysis_service),
            ("Service de D√©cision", self.test_decision_service),
            ("Service de Sentiment", self.test_sentiment_service),
            ("Service de Strat√©gie", self.test_strategy_service),
            ("Syst√®me de M√©moire", self.test_memory_system),
        ]
        
        results = []
        for test_name, test_func in tests:
            try:
                result = await test_func()
                results.append((test_name, result))
            except Exception as e:
                print(f"‚ùå Erreur dans {test_name}: {e}")
                results.append((test_name, False))
        
        # R√©sultats finaux
        print("\n" + "=" * 60)
        print("üìã R√âSULTATS DES TESTS")
        print("=" * 60)
        
        success_count = 0
        for test_name, success in results:
            status = "‚úÖ SUCC√àS" if success else "‚ùå √âCHEC"
            print(f"{test_name:.<30} {status}")
            if success:
                success_count += 1
        
        total_tests = len(results)
        success_rate = (success_count / total_tests) * 100
        
        print("-" * 60)
        print(f"R√©sultat global: {success_count}/{total_tests} tests r√©ussis ({success_rate:.1f}%)")
        
        if success_count == total_tests:
            print("üéâ INT√âGRATION IA/OPENROUTER R√âUSSIE !")
        else:
            print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        
        return success_count == total_tests
    
    async def cleanup(self):
        """Nettoie les ressources."""
        try:
            if self.ai_config:
                await shutdown_ai_system()
            print("\nüßπ Nettoyage termin√©")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors du nettoyage: {e}")


async def main():
    """Point d'entr√©e principal."""
    tester = AIIntegrationTester()
    
    try:
        success = await tester.run_integration_tests()
        return 0 if success else 1
    finally:
        await tester.cleanup()


if __name__ == "__main__":
    import asyncio
    exit_code = asyncio.run(main())
    sys.exit(exit_code)