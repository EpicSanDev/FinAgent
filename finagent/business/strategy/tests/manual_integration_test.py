"""
Test manuel d'int√©gration du syst√®me de strat√©gies FinAgent.

Ce script permet de tester manuellement le syst√®me complet
pour valider son bon fonctionnement.
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime

# Ajout du r√©pertoire parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent.parent))

from finagent.business.strategy.parser.yaml_parser import StrategyYAMLParser
from finagent.business.strategy.parser.strategy_validator import StrategyValidator
from finagent.business.strategy.engine.strategy_engine import StrategyEngine, ExecutionContext, ExecutionMode
from finagent.business.strategy.manager.strategy_manager import StrategyManager


class MockMarketDataProvider:
    """Fournisseur de donn√©es de march√© simul√© pour les tests."""
    
    def __init__(self):
        self.data = {}
    
    async def initialize(self):
        """Initialise le fournisseur de donn√©es."""
        pass
        
    async def connect(self):
        """Connecte au fournisseur de donn√©es."""
        pass
    
    async def get_current_price(self, symbol: str) -> dict:
        """Retourne un prix simul√©."""
        prices = {
            "AAPL": 150.0,
            "GOOGL": 2500.0,
            "MSFT": 300.0,
            "AMZN": 3200.0,
            "TSLA": 800.0
        }
        return {"price": prices.get(symbol, 100.0)}
    
    async def get_market_data(self, symbols: list) -> dict:
        """Retourne des donn√©es de march√© simul√©es."""
        data = {}
        for symbol in symbols:
            base_price = await self.get_current_price(symbol)
            data[symbol] = {
                "price": base_price["price"],
                "volume": 1000000,
                "sma_10": base_price["price"] * 0.98,
                "sma_20": base_price["price"] * 0.95,
                "volume_ratio": 1.2,
                "rsi": 60.0,
                "macd": 0.5,
                "bollinger_upper": base_price["price"] * 1.02,
                "bollinger_lower": base_price["price"] * 0.98
            }
        return data
    
    async def get_market_conditions(self) -> dict:
        """Retourne les conditions de march√© simul√©es."""
        return {
            "volatility": 0.15,
            "volume_ratio": 1.2,
            "spread_pct": 0.01,
            "market_trend": "bullish"
        }


class MockExecutionService:
    """Service d'ex√©cution simul√© pour les tests."""
    
    def __init__(self):
        self.executed_signals = []
    
    async def execute_signal(self, signal):
        """Simule l'ex√©cution d'un signal."""
        from finagent.business.strategy.engine.signal_generator import ExecutionResult
        
        self.executed_signals.append(signal)
        
        return ExecutionResult(
            signal_id=signal.signal_id,
            success=True,
            order_id=f"ORDER_{len(self.executed_signals):04d}",
            executed_price=signal.price_target * 0.999,  # L√©ger slippage
            executed_quantity=signal.quantity,
            execution_timestamp=datetime.now(),
            fees=signal.quantity * signal.price_target * 0.001,  # 0.1% de frais
            metadata={"simulated": True}
        )
    
    def get_executed_signals(self):
        """Retourne la liste des signaux ex√©cut√©s."""
        return self.executed_signals.copy()


async def test_yaml_parsing():
    """Test du parsing d'un fichier YAML."""
    print("üîç Test du parsing YAML...")
    
    # Utilisation d'un template existant
    template_path = Path(__file__).parent.parent / "templates" / "simple_test_strategy.yaml"
    
    if not template_path.exists():
        print(f"‚ùå Template non trouv√©: {template_path}")
        return False
    
    try:
        parser = StrategyYAMLParser()
        strategy = parser.parse_file(str(template_path))
        
        print(f"‚úÖ Strat√©gie pars√©e: {strategy.strategy.name}")
        print(f"   - Type: {strategy.strategy.type}")
        
        # V√©rifier les instruments dans l'univers
        instruments_count = 0
        if strategy.universe and strategy.universe.instruments:
            instruments_count = len(strategy.universe.instruments)
        elif strategy.universe and strategy.universe.watchlist:
            instruments_count = len(strategy.universe.watchlist)
            
        print(f"   - Instruments: {instruments_count}")
        
        # V√©rifier les r√®gles
        buy_conditions_count = 0
        sell_conditions_count = 0
        if hasattr(strategy, 'rules') and strategy.rules:
            if hasattr(strategy.rules, 'buy_conditions') and strategy.rules.buy_conditions:
                buy_conditions_count = len(strategy.rules.buy_conditions)
            if hasattr(strategy.rules, 'sell_conditions') and strategy.rules.sell_conditions:
                sell_conditions_count = len(strategy.rules.sell_conditions)
            
        print(f"   - Conditions d'achat: {buy_conditions_count}")
        print(f"   - Conditions de vente: {sell_conditions_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de parsing: {e}")
        return False


async def test_strategy_validation():
    """Test de la validation d'une strat√©gie."""
    print("\nüîç Test de validation de strat√©gie...")
    
    template_path = Path(__file__).parent.parent / "templates" / "simple_test_strategy.yaml"
    
    try:
        parser = StrategyYAMLParser()
        strategy = parser.parse_file(str(template_path))
        
        validator = StrategyValidator()
        result = validator.validate_strategy(strategy)
        
        print(f"‚úÖ Validation termin√©e:")
        print(f"   - Valide: {result.is_valid}")
        print(f"   - Erreurs: {len(result.errors)}")
        print(f"   - Avertissements: {len(result.warnings)}")
        print(f"   - Informations: {len(result.infos)}")
        
        if result.errors:
            print("   Erreurs d√©tect√©es:")
            for error in result.errors[:3]:  # Limite √† 3 erreurs
                print(f"     - {error}")
        
        if result.warnings:
            print("   Avertissements:")
            for warning in result.warnings[:3]:  # Limite √† 3 avertissements
                print(f"     - {warning}")
        
        return result.is_valid
        
    except Exception as e:
        print(f"‚ùå Erreur de validation: {e}")
        return False


async def test_strategy_engine():
    """Test du moteur de strat√©gie."""
    print("\nüîç Test du moteur de strat√©gie...")
    
    try:
        # Initialisation des mocks
        market_provider = MockMarketDataProvider()
        execution_service = MockExecutionService()
        
        # Cr√©ation du moteur
        engine = StrategyEngine(
            data_provider=market_provider
        )
        await engine.initialize()
        
        # Chargement d'une strat√©gie
        template_path = Path(__file__).parent.parent / "templates" / "simple_test_strategy.yaml"
        parser = StrategyYAMLParser()
        strategy = parser.parse_file(str(template_path))
        
        strategy_id = await engine.load_strategy(strategy)
        
        # Cr√©ation du contexte d'ex√©cution
        context = ExecutionContext(
            strategy_id=strategy_id,
            symbol="AAPL",
            timestamp=datetime.now(),
            market_data={
                "AAPL": {
                    "price": 150.0,
                    "volume": 1000000,
                    "high": 152.0,
                    "low": 148.0
                }
            },
            portfolio_state={
                "total_value": 100000.0,
                "available_capital": 20000.0,
                "positions": {}
            },
            execution_mode=ExecutionMode.SIMULATION,
            metadata={"test": True},
            market_conditions={"volatility": 0.15},
            execution_config={"timeout_seconds": 30},
            risk_limits={"max_position_risk": 0.05}
        )
        
        # Ex√©cution de la strat√©gie
        result = await engine.execute_strategy(strategy_id, context)
        
        print(f"‚úÖ Moteur ex√©cut√©:")
        print(f"   - Succ√®s: {result.error is None}")
        print(f"   - Temps d'ex√©cution: {result.execution_time_ms:.2f}ms")
        if result.error:
            print(f"   - Erreur: {result.error}")
        if result.signals:
            print(f"   - Signaux g√©n√©r√©s: {len(result.signals)}")
            for i, signal in enumerate(result.signals[:3]):  # Limite √† 3 signaux
                print(f"   - Signal {i+1}: {signal.symbol} ({signal.signal_type.value}) - Confiance: {signal.confidence:.2f}")
        else:
            print(f"   - Aucun signal g√©n√©r√©")
        
        await engine.cleanup()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur du moteur: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_strategy_manager():
    """Test du gestionnaire de strat√©gies."""
    print("\nüîç Test du gestionnaire de strat√©gies...")
    
    try:
        # Initialisation des mocks
        market_provider = MockMarketDataProvider()
        execution_service = MockExecutionService()
        
        # R√©pertoire des templates
        templates_dir = Path(__file__).parent.parent / "templates"
        
        # Cr√©ation du gestionnaire
        manager = StrategyManager(
            strategies_directory=str(templates_dir),
            market_data_provider=market_provider,
            execution_service=execution_service,
            max_concurrent_strategies=3
        )
        
        await manager.initialize()
        
        # Test d'ajout de strat√©gie
        template_path = templates_dir / "simple_test_strategy.yaml"
        strategy_id = await manager.add_strategy_from_file(str(template_path))
        
        print(f"‚úÖ Strat√©gie ajout√©e: {strategy_id}")
        
        # Test de d√©marrage
        await manager.start_strategy(strategy_id)
        print("‚úÖ Strat√©gie d√©marr√©e")
        
        # Test d'ex√©cution
        signals = await manager.execute_strategy(strategy_id)
        print(f"‚úÖ Ex√©cution r√©ussie: {len(signals)} signaux")
        
        # Test de statut
        status = manager.get_manager_status()
        print(f"‚úÖ Statut du gestionnaire:")
        print(f"   - Statut: {status['status']}")
        print(f"   - Strat√©gies actives: {status['active_strategies']}")
        print(f"   - Strat√©gies totales: {status['strategies_count']}")
        
        # Test d'arr√™t
        await manager.stop_strategy(strategy_id)
        print("‚úÖ Strat√©gie arr√™t√©e")
        
        # Nettoyage
        await manager.shutdown()
        print("‚úÖ Gestionnaire ferm√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur du gestionnaire: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_portfolio_allocation():
    """Test de l'allocation de portefeuille."""
    print("\nüîç Test de l'allocation de portefeuille...")
    
    try:
        from finagent.business.strategy.manager.portfolio_allocator import PortfolioAllocator
        from finagent.business.strategy.engine.signal_generator import TradingSignal, SignalType, SignalConfidence, SignalPriority
        
        # Initialisation de l'allocateur
        allocator = PortfolioAllocator(
            max_position_weight=0.10,
            max_sector_weight=0.40,
            min_cash_percentage=0.05
        )
        await allocator.initialize()
        
        # √âtat du portefeuille de test
        portfolio_state = {
            "total_value": 100000.0,
            "available_cash": 20000.0,
            "invested_value": 80000.0,
            "positions": {
                "AAPL": 15000.0,
                "GOOGL": 20000.0,
                "MSFT": 10000.0
            },
            "allocations": {
                "AAPL": 0.15,
                "GOOGL": 0.20,
                "MSFT": 0.10
            },
            "sector_exposures": {
                "Technology": 0.45
            },
            "strategy_allocations": {}
        }
        
        # Signal de test
        signal = TradingSignal(
            signal_id="test_allocation_001",
            strategy_id="test_strategy",
            symbol="AMZN",
            signal_type=SignalType.BUY,
            timestamp=datetime.now(),
            confidence=0.75,
            confidence_level=SignalConfidence.HIGH,
            priority=SignalPriority.MEDIUM,
            price_target=3200.0,
            quantity=5.0
        )
        
        # Test d'allocation
        allocation_result = await allocator.allocate_signal(signal, portfolio_state)
        
        print(f"‚úÖ Allocation calcul√©e:")
        print(f"   - Signal: {allocation_result.signal_id}")
        print(f"   - Montant allou√©: ${allocation_result.allocated_amount:.2f}")
        print(f"   - Pourcentage: {allocation_result.allocation_percentage:.2%}")
        print(f"   - Quantit√© ajust√©e: {allocation_result.adjusted_quantity:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur d'allocation: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_risk_management():
    """Test de la gestion des risques."""
    print("\nüîç Test de la gestion des risques...")
    
    try:
        from finagent.business.strategy.manager.risk_manager import StrategyRiskManager
        from finagent.business.strategy.engine.signal_generator import TradingSignal, SignalType, SignalConfidence, SignalPriority
        
        # Initialisation du gestionnaire de risques
        risk_manager = StrategyRiskManager(
            max_portfolio_risk=0.15,
            max_position_risk=0.05,
            max_concentration=0.20
        )
        await risk_manager.initialize()
        
        # √âtat du portefeuille de test
        portfolio_state = {
            "total_value": 100000.0,
            "available_cash": 20000.0,
            "positions": {
                "AAPL": 15000.0,
                "GOOGL": 20000.0
            },
            "allocations": {
                "AAPL": 0.15,
                "GOOGL": 0.20
            }
        }
        
        # Signal risqu√© de test
        signal = TradingSignal(
            signal_id="risky_signal_001",
            strategy_id="test_strategy",
            symbol="AAPL",  # Position existante
            signal_type=SignalType.BUY,
            timestamp=datetime.now(),
            confidence=0.80,
            confidence_level=SignalConfidence.HIGH,
            priority=SignalPriority.HIGH,
            price_target=150.0,
            quantity=200.0  # Position importante
        )
        
        # √âvaluation du risque
        risk_assessment = await risk_manager.assess_signal_risk(signal, portfolio_state)
        
        print(f"‚úÖ √âvaluation des risques:")
        print(f"   - ID: {risk_assessment.assessment_id}")
        print(f"   - Niveau de risque: {risk_assessment.overall_risk_level}")
        print(f"   - Acceptable: {risk_assessment.is_acceptable}")
        print(f"   - Score de risque: {risk_assessment.risk_score:.3f}")
        print(f"   - M√©triques: {len(risk_assessment.risk_metrics)}")
        
        # Calcul du risque du portefeuille
        portfolio_risk = await risk_manager.calculate_portfolio_risk(portfolio_state)
        
        print(f"‚úÖ Risque du portefeuille:")
        print(f"   - VaR 1j: ${portfolio_risk.var_1d:.2f}")
        print(f"   - Volatilit√©: {portfolio_risk.volatility:.2%}")
        print(f"   - Sharpe ratio: {portfolio_risk.sharpe_ratio:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de gestion des risques: {e}")
        import traceback
        traceback.print_exc()
        return False


async def run_integration_tests():
    """Lance tous les tests d'int√©gration."""
    print("üöÄ D√©marrage des tests d'int√©gration du syst√®me de strat√©gies FinAgent\n")
    
    tests = [
        ("Parsing YAML", test_yaml_parsing),
        ("Validation de strat√©gie", test_strategy_validation),
        ("Moteur de strat√©gie", test_strategy_engine),
        ("Gestionnaire de strat√©gies", test_strategy_manager),
        ("Allocation de portefeuille", test_portfolio_allocation),
        ("Gestion des risques", test_risk_management)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"üß™ {test_name}")
        print('='*60)
        
        try:
            result = await test_func()
            results.append((test_name, result))
            
            if result:
                print(f"\n‚úÖ {test_name}: R√âUSSI")
            else:
                print(f"\n‚ùå {test_name}: √âCHEC")
                
        except Exception as e:
            print(f"\n‚ùå {test_name}: ERREUR - {e}")
            results.append((test_name, False))
    
    # R√©sum√© des r√©sultats
    print(f"\n\n{'='*60}")
    print("üìä R√âSUM√â DES TESTS")
    print('='*60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"{test_name:<30} {status}")
    
    print(f"\nüéØ R√©sultat global: {passed}/{total} tests r√©ussis ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ Tous les tests d'int√©gration ont r√©ussi !")
        print("Le syst√®me de strat√©gies FinAgent est pr√™t √† l'emploi.")
    else:
        print(f"\n‚ö†Ô∏è  {total-passed} test(s) ont √©chou√©.")
        print("V√©rifiez les erreurs ci-dessus avant de continuer.")
    
    return passed == total


if __name__ == "__main__":
    # Ex√©cution des tests
    success = asyncio.run(run_integration_tests())
    sys.exit(0 if success else 1)