"""
Test simplifi√© des composants core de l'agent IA financier.

Ce script teste les composants principaux sans d√©pendances externes complexes :
- Mod√®les de donn√©es (validation Pydantic)
- Logique m√©tier des composants decision et portfolio
- Int√©gration des composants entre eux
"""

import asyncio
import logging
import sys
from decimal import Decimal
from datetime import datetime, timedelta
from pathlib import Path
from uuid import uuid4
from typing import Dict, Any

# Ajouter le projet au path
sys.path.insert(0, str(Path(__file__).parent))

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MockOpenBBProvider:
    """Mock du provider OpenBB pour les tests."""
    
    async def initialize(self):
        """Initialise le mock provider."""
        pass
    
    async def get_quote(self, symbol: str) -> Dict[str, Any]:
        """Retourne un prix simul√©."""
        # Prix simul√©s pour les tests
        mock_prices = {
            'AAPL': 175.50,
            'MSFT': 335.20,
            'GOOGL': 125.80,
            'TSLA': 225.40,
            'NVDA': 450.30
        }
        
        return {
            'symbol': symbol,
            'price': mock_prices.get(symbol, 100.0),
            'volume': 1000000,
            'timestamp': datetime.now()
        }
    
    async def get_historical_data(self, symbol: str, period: str = "1y", interval: str = "1d"):
        """Retourne des donn√©es historiques simul√©es."""
        import random
        import pandas as pd
        
        # G√©n√©rer 30 jours de donn√©es simul√©es
        dates = [datetime.now() - timedelta(days=i) for i in range(30)]
        dates.reverse()
        
        base_price = 100.0
        data = []
        
        for date in dates:
            # Simulation de donn√©es OHLCV
            open_price = base_price + random.uniform(-5, 5)
            high_price = open_price + random.uniform(0, 10)
            low_price = open_price - random.uniform(0, 10)
            close_price = open_price + random.uniform(-8, 8)
            volume = random.randint(500000, 2000000)
            
            data.append({
                'date': date,
                'open': open_price,
                'high': high_price,
                'low': low_price,
                'close': close_price,
                'volume': volume
            })
            
            base_price = close_price
        
        return data
    
    async def close(self):
        """Ferme le mock provider."""
        pass


class MockAIService:
    """Mock des services IA pour les tests."""
    
    async def analyze_market_data(self, symbol: str, data: Dict[str, Any]) -> str:
        """Analyse simul√©e des donn√©es de march√©."""
        return f"Analyse technique pour {symbol}: Tendance haussi√®re mod√©r√©e avec signal d'achat."
    
    async def make_investment_decision(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """D√©cision d'investissement simul√©e."""
        return {
            'action': 'BUY',
            'confidence': 0.75,
            'reasoning': "Analyse technique positive et fondamentaux solides."
        }


class CoreComponentsTest:
    """Test des composants core."""
    
    def __init__(self):
        """Initialise le test."""
        logger.info("Initialisation du test des composants core")
        
        # Mocks
        self.openbb_provider = MockOpenBBProvider()
        self.ai_service = MockAIService()
        
        # Test symbols
        self.test_symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA']
        
        logger.info("Test initialis√©")
    
    async def test_data_models(self):
        """Test les mod√®les de donn√©es Pydantic."""
        logger.info("\nüîç Test des mod√®les de donn√©es...")
        
        try:
            from finagent.business.models.decision_models import (
                DecisionSignal, DecisionContext, DecisionResult, 
                MarketAnalysis, RiskAssessment
            )
            from finagent.business.models.portfolio_models import (
                Position, Transaction, Portfolio, PortfolioMetrics,
                PerformanceMetrics, RebalanceRecommendation
            )
            
            # Test DecisionSignal
            signal = DecisionSignal(
                symbol="AAPL",
                signal_type="technical",
                action="BUY",
                strength=0.8,
                confidence=0.75,
                reasoning="RSI oversold",
                timestamp=datetime.now(),
                source="market_analyzer"
            )
            logger.info(f"‚úì DecisionSignal cr√©√©: {signal.symbol} {signal.action}")
            
            # Test DecisionContext
            context = DecisionContext(
                symbol="AAPL",
                portfolio_id=uuid4(),
                amount=Decimal("10000"),
                decision_type="investment",
                risk_tolerance="moderate",
                time_horizon="medium_term"
            )
            logger.info(f"‚úì DecisionContext cr√©√©: {context.symbol} ${context.amount}")
            
            # Test Position
            position = Position(
                portfolio_id=uuid4(),
                symbol="AAPL",
                quantity=Decimal("100"),
                average_cost=Decimal("150.00"),
                current_price=Decimal("175.50"),
                market_value=Decimal("17550.00"),
                unrealized_pnl=Decimal("2550.00"),
                realized_pnl=Decimal("0.00"),
                weight=0.25,
                last_updated=datetime.now()
            )
            logger.info(f"‚úì Position cr√©√©e: {position.symbol} {position.quantity} @ ${position.current_price}")
            
            # Test Portfolio
            portfolio = Portfolio(
                id=uuid4(),
                name="Test Portfolio",
                cash=Decimal("50000"),
                total_value=Decimal("100000"),
                positions={},
                target_allocation={'AAPL': 0.25, 'MSFT': 0.25, 'GOOGL': 0.25, 'TSLA': 0.25},
                rebalance_threshold=0.05,
                risk_tolerance="moderate",
                created_at=datetime.now(),
                last_updated=datetime.now()
            )
            logger.info(f"‚úì Portfolio cr√©√©: {portfolio.name} ${portfolio.total_value}")
            
            logger.info("‚úÖ Tous les mod√®les de donn√©es sont valides")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur test mod√®les: {e}")
            return False
    
    async def test_market_analyzer(self):
        """Test le MarketAnalyzer."""
        logger.info("\nüìà Test du MarketAnalyzer...")
        
        try:
            from finagent.business.decision.market_analyzer import MarketAnalyzer
            
            analyzer = MarketAnalyzer(self.openbb_provider)
            
            # Test analyse d'un symbole
            analysis = await analyzer.analyze_symbol("AAPL")
            
            if analysis:
                logger.info(f"‚úì Analyse AAPL: tendance {analysis.trend_direction}")
                logger.info(f"  Support: ${analysis.support_level:.2f}")
                logger.info(f"  R√©sistance: ${analysis.resistance_level:.2f}")
                logger.info(f"  Indicateurs: {len(analysis.technical_indicators)} calcul√©s")
                return True
            else:
                logger.warning("‚ö†Ô∏è Aucune analyse retourn√©e")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test MarketAnalyzer: {e}")
            return False
    
    async def test_signal_aggregator(self):
        """Test le SignalAggregator."""
        logger.info("\nüéØ Test du SignalAggregator...")
        
        try:
            from finagent.business.decision.signal_aggregator import SignalAggregator
            from finagent.business.models.decision_models import DecisionSignal
            
            aggregator = SignalAggregator()
            
            # Cr√©er des signaux de test
            signals = [
                DecisionSignal(
                    symbol="AAPL",
                    signal_type="technical",
                    action="BUY",
                    strength=0.8,
                    confidence=0.75,
                    reasoning="RSI oversold",
                    timestamp=datetime.now(),
                    source="technical_analysis"
                ),
                DecisionSignal(
                    symbol="AAPL",
                    signal_type="fundamental",
                    action="BUY",
                    strength=0.6,
                    confidence=0.65,
                    reasoning="Strong earnings",
                    timestamp=datetime.now(),
                    source="fundamental_analysis"
                )
            ]
            
            # Agr√©ger les signaux
            aggregation = await aggregator.aggregate_signals(signals)
            
            if aggregation:
                logger.info(f"‚úì Agr√©gation: {aggregation.final_action} "
                          f"(confiance: {aggregation.consensus_confidence:.2f})")
                logger.info(f"  Signaux trait√©s: {len(aggregation.processed_signals)}")
                return True
            else:
                logger.warning("‚ö†Ô∏è Aucune agr√©gation retourn√©e")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test SignalAggregator: {e}")
            return False
    
    async def test_risk_evaluator(self):
        """Test le RiskEvaluator."""
        logger.info("\n‚ö†Ô∏è Test du RiskEvaluator...")
        
        try:
            from finagent.business.decision.risk_evaluator import RiskEvaluator
            from finagent.business.models.portfolio_models import Portfolio
            
            evaluator = RiskEvaluator(self.openbb_provider)
            
            # Cr√©er un portefeuille de test
            portfolio = Portfolio(
                id=uuid4(),
                name="Test Portfolio",
                cash=Decimal("50000"),
                total_value=Decimal("100000"),
                positions={},
                target_allocation={'AAPL': 0.4, 'MSFT': 0.3, 'GOOGL': 0.3},
                rebalance_threshold=0.05,
                risk_tolerance="moderate",
                created_at=datetime.now(),
                last_updated=datetime.now()
            )
            
            # √âvaluer le risque
            assessment = await evaluator.evaluate_portfolio_risk(portfolio)
            
            if assessment:
                logger.info(f"‚úì √âvaluation risque: niveau {assessment.risk_level}")
                logger.info(f"  Score: {assessment.risk_score:.2f}")
                logger.info(f"  VaR: {assessment.value_at_risk:.2%}")
                logger.info(f"  Recommandations: {len(assessment.recommendations)}")
                return True
            else:
                logger.warning("‚ö†Ô∏è Aucune √©valuation retourn√©e")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test RiskEvaluator: {e}")
            return False
    
    async def test_position_manager(self):
        """Test le PositionManager."""
        logger.info("\nüíº Test du PositionManager...")
        
        try:
            from finagent.business.portfolio.position_manager import PositionManager
            from finagent.business.models.portfolio_models import Transaction, TransactionType
            
            manager = PositionManager()
            
            # Cr√©er des transactions de test
            portfolio_id = uuid4()
            
            transactions = [
                Transaction(
                    portfolio_id=portfolio_id,
                    symbol="AAPL",
                    transaction_type=TransactionType.BUY,
                    quantity=Decimal("100"),
                    price=Decimal("150.00"),
                    timestamp=datetime.now() - timedelta(days=30),
                    fees=Decimal("9.99")
                ),
                Transaction(
                    portfolio_id=portfolio_id,
                    symbol="AAPL",
                    transaction_type=TransactionType.BUY,
                    quantity=Decimal("50"),
                    price=Decimal("160.00"),
                    timestamp=datetime.now() - timedelta(days=15),
                    fees=Decimal("9.99")
                )
            ]
            
            # Calculer les positions
            positions = await manager.calculate_positions(transactions)
            
            if positions and "AAPL" in positions:
                position = positions["AAPL"]
                logger.info(f"‚úì Position AAPL: {position.quantity} @ ${position.average_cost:.2f}")
                logger.info(f"  Co√ªt total: ${position.total_cost:.2f}")
                logger.info(f"  P&L r√©alis√©: ${position.realized_pnl:.2f}")
                return True
            else:
                logger.warning("‚ö†Ô∏è Aucune position calcul√©e")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test PositionManager: {e}")
            return False
    
    async def test_performance_tracker(self):
        """Test le PerformanceTracker."""
        logger.info("\nüìä Test du PerformanceTracker...")
        
        try:
            from finagent.business.portfolio.performance_tracker import PerformanceTracker
            
            tracker = PerformanceTracker()
            
            # Cr√©er des donn√©es de performance simul√©es
            portfolio_id = uuid4()
            
            # Simuler des valeurs historiques
            historical_values = []
            base_value = 100000.0
            
            for i in range(30):  # 30 jours
                date = datetime.now() - timedelta(days=30-i)
                # Simulation d'une croissance avec volatilit√©
                daily_return = (i * 0.003) + ((-1) ** i) * 0.01  # +0.3% par jour avec volatilit√©
                base_value *= (1 + daily_return)
                
                historical_values.append({
                    'date': date,
                    'total_value': Decimal(str(base_value)),
                    'cash': Decimal("10000"),
                    'positions_value': Decimal(str(base_value - 10000))
                })
            
            # Calculer les m√©triques
            metrics = await tracker.calculate_performance_metrics(portfolio_id, historical_values)
            
            if metrics:
                logger.info(f"‚úì M√©triques calcul√©es:")
                logger.info(f"  Rendement total: {metrics.total_return:.2%}")
                logger.info(f"  Volatilit√©: {metrics.volatility:.2%}")
                logger.info(f"  Ratio Sharpe: {metrics.sharpe_ratio:.3f}")
                logger.info(f"  Drawdown max: {metrics.max_drawdown:.2%}")
                return True
            else:
                logger.warning("‚ö†Ô∏è Aucune m√©trique calcul√©e")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test PerformanceTracker: {e}")
            return False
    
    async def test_rebalancer(self):
        """Test le Rebalancer."""
        logger.info("\n‚öñÔ∏è Test du Rebalancer...")
        
        try:
            from finagent.business.portfolio.rebalancer import Rebalancer
            from finagent.business.models.portfolio_models import Portfolio, Position
            
            rebalancer = Rebalancer(self.openbb_provider)
            
            # Cr√©er un portefeuille d√©s√©quilibr√© pour le test
            portfolio_id = uuid4()
            
            # Positions actuelles (d√©s√©quilibr√©es)
            positions = {
                "AAPL": Position(
                    portfolio_id=portfolio_id,
                    symbol="AAPL",
                    quantity=Decimal("200"),
                    average_cost=Decimal("150.00"),
                    current_price=Decimal("175.50"),
                    market_value=Decimal("35100.00"),
                    unrealized_pnl=Decimal("5100.00"),
                    realized_pnl=Decimal("0.00"),
                    weight=0.35,  # 35% au lieu de 25% cible
                    last_updated=datetime.now()
                )
            }
            
            portfolio = Portfolio(
                id=portfolio_id,
                name="Test Rebalance Portfolio",
                cash=Decimal("40000"),
                total_value=Decimal("100000"),
                positions=positions,
                active_positions=positions,
                target_allocation={'AAPL': 0.25, 'MSFT': 0.25, 'GOOGL': 0.25, 'TSLA': 0.25},
                rebalance_threshold=0.05,
                risk_tolerance="moderate",
                created_at=datetime.now(),
                last_updated=datetime.now()
            )
            
            # Analyser le r√©√©quilibrage
            recommendation = await rebalancer.analyze_portfolio(portfolio)
            
            if recommendation:
                logger.info(f"‚úì Recommandation de r√©√©quilibrage:")
                logger.info(f"  Type: {recommendation.rebalance_type}")
                logger.info(f"  Actions: {len(recommendation.actions)}")
                logger.info(f"  Co√ªt estim√©: ${recommendation.estimated_cost:.2f}")
                logger.info(f"  Raison: {recommendation.reason}")
                return True
            else:
                logger.info("‚úì Aucun r√©√©quilibrage n√©cessaire")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test Rebalancer: {e}")
            return False
    
    async def run_all_tests(self):
        """Lance tous les tests."""
        logger.info("üöÄ D√©but des tests des composants core")
        
        start_time = datetime.now()
        results = {}
        
        try:
            # Initialiser les mocks
            await self.openbb_provider.initialize()
            
            # Lancer les tests
            tests = [
                ("Mod√®les de donn√©es", self.test_data_models),
                ("MarketAnalyzer", self.test_market_analyzer),
                ("SignalAggregator", self.test_signal_aggregator),
                ("RiskEvaluator", self.test_risk_evaluator),
                ("PositionManager", self.test_position_manager),
                ("PerformanceTracker", self.test_performance_tracker),
                ("Rebalancer", self.test_rebalancer),
            ]
            
            for test_name, test_func in tests:
                try:
                    result = await test_func()
                    results[test_name] = result
                except Exception as e:
                    logger.error(f"‚ùå √âchec {test_name}: {e}")
                    results[test_name] = False
            
            # R√©sum√©
            end_time = datetime.now()
            duration = end_time - start_time
            
            passed = sum(1 for r in results.values() if r)
            total = len(results)
            
            logger.info(f"\nüìã R√©sum√© des tests:")
            logger.info(f"‚è±Ô∏è Dur√©e: {duration.total_seconds():.1f} secondes")
            logger.info(f"‚úÖ R√©ussis: {passed}/{total}")
            
            for test_name, result in results.items():
                status = "‚úÖ" if result else "‚ùå"
                logger.info(f"  {status} {test_name}")
            
            if passed == total:
                logger.info("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
                return True
            else:
                logger.warning(f"\n‚ö†Ô∏è {total - passed} test(s) ont √©chou√©")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors des tests: {e}")
            return False
        
        finally:
            await self.openbb_provider.close()


async def main():
    """Point d'entr√©e principal."""
    
    test = CoreComponentsTest()
    
    try:
        success = await test.run_all_tests()
        return 0 if success else 1
        
    except KeyboardInterrupt:
        logger.info("Tests interrompus par l'utilisateur")
        return 1
        
    except Exception as e:
        logger.error(f"Erreur inattendue: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)